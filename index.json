[{"authors":["todd"],"categories":null,"content":"I am an Assistant Professor at Cornell University in the Dyson School of Applied Economics and Management. My research interests are in energy and environmental economics, public economics, and industrial organization.\nI hold a Ph.D. in Public Policy from Harvard University and a B.S. in Mechanical Engineering from the University of Virginia.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"e567a46a4203ed291cab1a8af6888b80","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am an Assistant Professor at Cornell University in the Dyson School of Applied Economics and Management. My research interests are in energy and environmental economics, public economics, and industrial organization.","tags":null,"title":"","type":"authors"},{"authors":null,"categories":null,"content":"I have included a bunch of extra resources and guides related to graphic design, visualization, R, data, and other relevant topics. Enjoy!\n","date":1588723200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1588723200,"objectID":"e5656835a9d5f0c69a44e56dc2b58101","permalink":"aem2850.toddgerarden.com/resource/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/","section":"resource","summary":"I have included a bunch of extra resources and guides related to graphic design, visualization, R, data, and other relevant topics. Enjoy!","tags":null,"title":"Helpful resources","type":"docs"},{"authors":null,"categories":null,"content":"Each class session has a set of required readings that you should ideally complete before coming to lecture and working through the examples for each topic.\nEach topic includes a set of questions to help guide your reflection response. You do not need to respond to all of them—they’ll just help you know what to look for and think about as you read.\nThe lecture slides are special HTML files made with the R package xaringan (R can do so much!). On each class session page you’ll buttons for opening the presentation in a new tab or for downloading a PDF of the slides in case you want to print them or store them on your computer:\n View all slides in new window  Download PDF of all slides\nThe slides are also embedded on each page. You can click in the slides and navigate through them with ← and →. If you type ? (or shift + /) while viewing the slides you can see a list of slide-specific commands (like f for fullscreen or p for presenter mode if you want to see my notes).\n","date":1642796640,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1642796640,"objectID":"d5be68294f12f9cfecf81ad87009adc6","permalink":"aem2850.toddgerarden.com/content/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/content/","section":"content","summary":"Each class session has a set of required readings that you should ideally complete before coming to lecture and working through the examples for each topic.\nEach topic includes a set of questions to help guide your reflection response.","tags":null,"title":"Readings, lectures, and videos","type":"docs"},{"authors":null,"categories":null,"content":"You will get the most of out this class if you:\n Engage with the readings and lecture materials Regularly use R  Each type of assignment in this class helps with one of these strategies.\nReflections To encourage engagement with the course content, you’ll need to write a ≈150 word reflection about the readings and lectures for the day. That’s fairly short: there are ≈250 words on a typical double-spaced page in Microsoft Word (500 when single-spaced).\nYou can do a lot of different things with this memo: discuss something you learned from the course content, write about the best or worst data visualization you saw recently, connect the course content to your own work, etc. These reflections let you explore and answer some of the key questions of this course, including:\n What is truth? How is truth related to visualization? Why do we visualize data? What makes a great visualization? What makes a bad visualization? How do you choose which kind of visualization to use? What is the role of stories in presenting analysis?  The course content for each day will also include a set of questions specific to that topic. You do not have to answer all (or any) of these questions. That would be impossible. They exist to guide your thinking, that’s all.\nI will grade these memos using a check system:\n ✔+: (11.5 points (115%) in gradebook) Reflection shows phenomenal thought and engagement with the course content. I will not assign these often. ✔: (10 points (100%) in gradebook) Reflection is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance. ✔−: (5 points (50%) in gradebook) Reflection is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.  Notice that is essentially a pass/fail or completion-based system. I’m not grading your writing ability, I’m not counting the exact number of words you’re writing, and I’m not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. I’m looking for thoughtful engagement, that’s all. Do good work and you’ll get a ✓.\nYou will turn these reflections in via iCollege. You will write them using R Markdown and they will be the first section of your daily exercises (see below).\nExercises Each class session has interactive lessons and fully annotated examples of code that teach and demonstrate how to do specific tasks in R. However, without practicing these principles and making graphics on your own, you won’t remember what you learn!\nTo practice working with ggplot2 and making data-based graphics, you will complete a brief set of exercises for each class session. These exercises will have 1–3 short tasks that are directly related to the topic for the day. You need to show that you made a good faith effort to work each question. The problem sets will also be graded using a check system:\n ✔+: (11.5 points (115%) in gradebook) Exercises are 100% completed. Every task was attempted and answered, and most answers are correct. Knitted document is clean and easy to follow. Work is exceptional. I will not assign these often. ✔: (10 points (100%) in gradebook) Exercises are 70–99% complete and most answers are correct. This is the expected level of performance. ✔−: (5 points (50%) in gradebook) Exercises are less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not assign these often.  Note that this is also essentially a pass/fail system. I’m not grading your coding ability, I’m not checking each line of code to make sure it produces some exact final figure, and I’m not looking for perfect. Also note that a ✓ does not require 100% completion—you will sometimes get stuck with weird errors that you can’t solve, or the demands of pandemic living might occasionally become overwhelming. I’m looking for good faith effort, that’s all. Try hard, do good work, and you’ll get a ✓.\nYou may (and should!) work together on the exercises, but you must turn in your own answers.\nYou will turn these exercises in using iCollege. You will include your reflection in the first part of the document—the rest will be your exercise tasks.\nMini projects To give you practice with the data and design principles you’ll learn in this class, you will complete two mini projects. I will provide you with real-world data and pose one or more questions—you will make a pretty picture to answer those questions.\nThe mini projects will be graded using a check system:\n ✔+: (85 points (≈115%) in gradebook) Project is phenomenally well-designed and uses advanced R techniques. The project uncovers an important story that is not readily apparent from just looking at the raw data. I will not assign these often. ✔: (75 points (100%) in gradebook) Project is fine, follows most design principles, answers a question from the data, and uses R …","date":1627689600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1627689600,"objectID":"70aabaa53d8a5fd747407383562bac7a","permalink":"aem2850.toddgerarden.com/assignments/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/","section":"assignments","summary":"You will get the most of out this class if you:\n Engage with the readings and lecture materials Regularly use R  Each type of assignment in this class helps with one of these strategies.","tags":null,"title":"Assignment overview","type":"docs"},{"authors":null,"categories":null,"content":"This section contains fully annotated R code that you can use as a reference for creating your own visualizations. In the lessons section, you sequentially build up your understanding of R and ggplot2; here you can see how all the pieces work together.\nVisit this section after you have finished the readings, lecture videos, and lesson. The examples here will be indispensable for you as you work on your assignments and mini projects.\nEach section also contains videos of me live coding the examples so you can see what it looks like to work with R in real time. You’ll notice me make all sorts of little errors, which is totally normal—everyone does!\n","date":1627257600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1627257600,"objectID":"e9b55dc35cd7c0402d035e510f00bf75","permalink":"aem2850.toddgerarden.com/example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/","section":"example","summary":"This section contains fully annotated R code that you can use as a reference for creating your own visualizations. In the lessons section, you sequentially build up your understanding of R and ggplot2; here you can see how all the pieces work together.","tags":null,"title":"Code examples","type":"docs"},{"authors":null,"categories":null,"content":"You will do all of your work in this class with the open source (and free!) programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.\nRStudio.cloud R is free, but it can sometimes be a pain to install and configure. To make life easier, you can (and should!) use the free RStudio.cloud service initially, which lets you run a full instance of RStudio in your web browser. This means you won’t have to install anything on your computer to get started with R! We will have a shared class workspace in RStudio.cloud that will let you quickly copy templates for labs and problem sets.\nGo to https://rstudio.cloud/ and create an account. You’ll receive a link to join the shared class workspace separately. If you don’t get this link, let me know and I will invite you.\nRStudio on your computer RStudio.cloud is convenient, but it can be slow and it is not designed to be able to handle larger datasets, more complicated analysis, or fancier graphics. Over the course of the semester, you should wean yourself off of RStudio.cloud and install all these things locally. This is also important if you want to customize fonts, since RStudio.cloud has extremely limited support for fonts other than Helvetica.\nHere’s how you install all these things\nInstall R First you need to install R itself (the engine).\n  Go to the CRAN (Collective R Archive Network)1 website: https://cran.r-project.org/\n  Click on “Download R for XXX”, where XXX is either Mac or Windows:\n  If you use macOS, scroll down to the first .pkg file in the list of files (in this picture, it’s R-4.0.0.pkg; as of right now, the current version is also 4.0.0) and download it.\n  If you use Windows, click “base” (or click on the bolded “install R for the first time” link) and download it.\n    Double click on the downloaded file (check your Downloads folder). Click yes through all the prompts to install like any other program.\n  If you use macOS, download and install XQuartz. You do not need to do this on Windows.\n  Install RStudio Next, you need to install RStudio, the nicer graphical user interface (GUI) for R (the dashboard). Once R and RStudio are both installed, you can ignore R and only use RStudio. RStudio will use R automatically and you won’t ever have to interact with it directly.\n  Go to the free download location on RStudio’s website: https://www.rstudio.com/products/rstudio/download/#download\n  The website should automatically detect your operating system (macOS or Windows) and show a big download button for it:\nIf not, scroll down a little to the large table and choose the version of RStudio that matches your operating system.\n  Double click on the downloaded file (again, check your Downloads folder). Click yes through all the prompts to install like any other program.\n  Double click on RStudio to run it (check your applications folder or start menu).\nInstall tidyverse R packages are easy to install with RStudio. Select the packages panel, click on “Install,” type the name of the package you want to install, and press enter.\nThis can sometimes be tedious when you’re installing lots of packages, though. The tidyverse, for instance, consists of dozens of packages (including ggplot2) that all work together. Rather than install each individually, you can install a single magical package and get them all at the same time.\nGo to the packages panel in RStudio, click on “Install,” type “tidyverse”, and press enter. You’ll see a bunch of output in the RStudio console as all the tidyverse packages are installed.\nNotice also that RStudio will generate a line of code for you and run it: install.packages(\u0026#34;tidyverse\u0026#34;). You can also just paste and run this instead of using the packages panel.\nInstall tinytex When you knit to PDF, R uses a special scientific typesetting program named LaTeX (pronounced “lay-tek” or “lah-tex”; for goofy nerdy reasons, the x is technically the “ch” sound in “Bach”, but most people just say it as “k”—saying “layteks” is frowned on for whatever reason).\nLaTeX is neat and makes pretty documents, but it’s a huge program—the macOS version, for instance, is nearly 4 GB! To make life easier, there’s an R package named tinytex that installs a minimal LaTeX program and that automatically deals with differences between macOS and Windows.\nHere’s how to install tinytex so you can knit to pretty PDFs:\n Use the Packages in panel in RStudio to install tinytex like you did above with tidyverse. Alternatively, run install.packages(\u0026#34;tinytex\u0026#34;) in the console. Run tinytex::install_tinytex() in the console. Wait for a bit while R downloads and installs everything you need. The end! You should now be able to knit to PDF.    It’s a goofy name, but CRAN is where most R packages—and R itself—lives. ↩︎\n   ","date":1588291200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588291200,"objectID":"c5e6c5f0d0baae071e282245bbba803c","permalink":"aem2850.toddgerarden.com/resource/install/","publishdate":"2020-05-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/install/","section":"resource","summary":"You will do all of your work in this class with the open source (and free!) programming language R. You will use RStudio as the main program to access R. Think of R as an engine and RStudio as a car dashboard—R handles all the calculations and the actual statistics, while RStudio provides a nice interface for running R code.","tags":null,"title":"Installing R, RStudio, tidyverse, and tinytex","type":"docs"},{"authors":null,"categories":null,"content":"Accessibility  Vischeck: Simulate how your images look for people with different forms of colorblindness (web-based) Color Oracle: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)  Colors  Adobe Color: Create, share, and explore rule-based and custom color palettes. ColourLovers: Like Facebook for color palettes. viridis: Percetually uniform color scales. Scientific Colour-Maps: Perceptually uniform color scales like viridis. Use them in R with scico. ColorBrewer: Sequential, diverging, and qualitative color palettes that take accessibility into account. *HCL palettes: The colorspace package for R includes a ton of qualitative, sequential, and diverging HCL (hue-chroma-luminance) palettes that use fancy mathematical rules that maintain perceptual distance Colorgorical: Create color palettes based on fancy mathematical rules for perceptual distance. Colorpicker for data: More fancy mathematical rules for color palettes (explanation). iWantHue: Yet another perceptual distance-based color palette builder. Photochrome: Word-based color pallettes. PolicyViz Design Color Tools: Large collection of useful color resources  Fonts  Google Fonts: Huge collection of free, well-made fonts. The Ultimate Collection of Google Font Pairings: A list of great, well-designed font pairings from all those fonts hosted by Google (for when you’re looking for good contrasting or complementary fonts).  Graphic assets Images  Use the Creative Commons filters on Google Images or Flickr Unsplash Pexels Pixabay StockSnap.io Burst freephotos.cc  Vectors  Noun Project: Thousands of free simple vector images aiconica: 1,000+ vector icons Vecteezy: Thousands of free vector images  Vectors, photos, videos, and other assets  Stockio  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"bbf109be0953ce2a516459bed0a71d76","permalink":"aem2850.toddgerarden.com/resource/design/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/design/","section":"resource","summary":"Accessibility  Vischeck: Simulate how your images look for people with different forms of colorblindness (web-based) Color Oracle: Simulate how your images look for people with different forms of colorblindness (desktop-based, more types of colorblindness)  Colors  Adobe Color: Create, share, and explore rule-based and custom color palettes.","tags":null,"title":"Design","type":"docs"},{"authors":null,"categories":null,"content":"Interesting and excellent real world examples  The Stories Behind a Line Australia as 100 people: You can make something like this with d3 and the potato project. Marrying Later, Staying Single Longer  How to select the appropriate chart type Many people have created many useful tools for selecting the correct chart type for a given dataset or question. The Financial Times has an excellent diagram that shows what kind of charts are appropriate for which kinds of data you have:\n The Financial Times’s “Visual Vocabulary” (PDF poster and interactive website)  Here are some other fantastic resources too:\n The Data Visualisation Catalogue: Descriptions, explanations, examples, and tools for creating 60 different types of visualizations. The Data Viz Project: Descriptions and examples for 150 different types of visualizations. Also allows you to search by data shape and chart function (comparison, correlation, distribution, geographical, part to whole, trend over time, etc.). From Data to Viz: A decision tree for dozens of chart types with links to R and Python code. The Chartmaker Directory: Examples of how to create 51 different types of visualizations in 31 different software packages, including Excel, Tableau, and R. R Graph Catalog: R code for 124 ggplot graphs. Emery’s Essentials: Descriptions and examples of 26 different chart types.  General resources  Storytelling with Data: Blog and site full of resources by Cole Nussbaumer Knaflic. Ann K. Emery’s blog: Blog and tutorials by Ann Emery. Evergreen Data: Helful resources by Stephanie Evergreen. PolicyViz: Regular podcast and site full of helpful resources by Jon Schwabisch. Visualising Data: Fantastic collection of visualization resources, articles, and tutorials by Andy Kirk. Info We Trust: Detailed explorations of visualizations by RJ Andrews, including a beautiful visual history of the field. FlowingData: Blog by Nathan Yau. Information is Beautiful: Blog by David McCandless. Junk Charts: Blog by Kaiser Fung. WTF Visualizations: Visualizations that make you ask “wtf?” The Data Visualization Checklist: A helpful set of criteria for grading the effectiveness of a graphic. Data Literacy Starter Kit: Compilation of resources to become data literate by Laura Calloway. Seeing Data: A series of research projects about perceptions and visualizations.  Visualization in Excel  How to Build Data Visualizations in Excel: Detailed tutorials for creating 14 different visualizations in Excel. Ann Emery’s tutorials: Fantastic series of tutorials for creating charts in Excel.  Visualization in Tableau Because it is focused entirely on visualization (and because it’s a well-supported commercial product), Tableau has a phenomenal library of tutorials and training videos. There’s a helpful collections of videos here, as well.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"95ef249e3899f50b4dcddfe05973329b","permalink":"aem2850.toddgerarden.com/resource/visualization/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/visualization/","section":"resource","summary":"Interesting and excellent real world examples  The Stories Behind a Line Australia as 100 people: You can make something like this with d3 and the potato project. Marrying Later, Staying Single Longer  How to select the appropriate chart type Many people have created many useful tools for selecting the correct chart type for a given dataset or question.","tags":null,"title":"Visualization","type":"docs"},{"authors":null,"categories":null,"content":"R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document. You can create HTML, PDF, and Word documents, PowerPoint and HTML presentations, websites, books, and even interactive dashboards with R Markdown. This whole course website is created with R Markdown (and a package named blogdown).\nThe documentation for R Markdown is extremely comprehensive, and their tutorials and cheatsheets are excellent—rely on those.\nHere are the most important things you’ll need to know about R Markdown in this class:\nKey terms   Document: A Markdown file where you type stuff\n  Chunk: A piece of R code that is included in your document. It looks like this:\n```{r} # Code goes here ```  There must be an empty line before and after the chunk. The final three backticks must be the only thing on the line—if you add more text, or if you forget to add the backticks, or accidentally delete the backticks, your document will not knit correctly.\n  Knit: When you “knit” a document, R runs each of the chunks sequentially and converts the output of each chunk into Markdown. R then runs the knitted document through pandoc to convert it to HTML or PDF or Word (or whatever output you’ve selected).\nYou can knit by clicking on the “Knit” button at the top of the editor window, or by pressing ⌘⇧K on macOS or control + shift + K on Windows.\n  Add chunks There are three ways to insert chunks:\n  Press ⌘⌥I on macOS or control + alt + I on Windows\n  Click on the “Insert” button at the top of the editor window\n  Manually type all the backticks and curly braces (don’t do this)\n  Chunk names You can add names to chunks to make it easier to navigate your document. If you click on the little dropdown menu at the bottom of your editor in RStudio, you can see a table of contents that shows all the headings and chunks. If you name chunks, they’ll appear in the list. If you don’t include a name, the chunk will still show up, but you won’t know what it does.\nTo add a name, include it immediately after the {r in the first line of the chunk. Names cannot contain spaces, but they can contain underscores and dashes. All chunk names in your document must be unique.\n```{r name-of-this-chunk} # Code goes here ```  Chunk options There are a bunch of different options you can set for each chunk. You can see a complete list in the RMarkdown Reference Guide or at knitr’s website.\nOptions go inside the {r} section of the chunk:\n```{r name-of-this-chunk, warning=FALSE, message=FALSE} # Code goes here ```  The most common chunk options are these:\n fig.width=5 and fig.height=3 (or whatever number you want): Set the dimensions for figures echo=FALSE: The code is not shown in the final document, but the results are message=FALSE: Any messages that R generates (like all the notes that appear after you load a package) are omitted warning=FALSE: Any warnings that R generates are omitted include=FALSE: The chunk still runs, but the code and results are not included in the final document  You can also set chunk options by clicking on the little gear icon in the top right corner of any chunk:\nInline chunks You can also include R output directly in your text, which is really helpful if you want to report numbers from your analysis. To do this, use `r r_code_here`.\nIt’s generally easiest to calculate numbers in a regular chunk beforehand and then use an inline chunk to display the value in your text. For instance, this document…\n```{r find-avg-mpg, echo=FALSE} avg_mpg \u0026lt;- mean(mtcars$mpg) ``` The average fuel efficiency for cars from 1974 was `r round(avg_mpg, 1)` miles per gallon.  … would knit into this:\n The average fuel efficiency for cars from 1974 was 20.1 miles per gallon.\n Output formats You can specify what kind of document you create when you knit in the YAML front matter.\ntitle: \u0026#34;My document\u0026#34; output: html_document: default pdf_document: default word_document: default  You can also click on the down arrow on the “Knit” button to choose the output and generate the appropriate YAML. If you click on the gear icon next to the “Knit” button and choose “Output options”, you change settings for each specific output type, like default figure dimensions or whether or not a table of contents is included.\nThe first output type listed under output: will be what is generated when you click on the “Knit” button or press the keyboard shortcut (⌘⇧K on macOS; control + shift + K on Windows). If you choose a different output with the “Knit” button menu, that output will be moved to the top of the output section.\nThe indentation of the YAML section matters, especially when you have settings nested under each output type. Here’s what a typical output section might look like:\n--- title: \u0026#34;My document\u0026#34; author: \u0026#34;My name\u0026#34; date: \u0026#34;January 13, 2020\u0026#34; output: html_document: toc: yes fig_caption: yes fig_height: 8 fig_width: 10 pdf_document: latex_engine: …","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578873600,"objectID":"4c95f77a8fb69d2c5ee2e6b67bcae08b","permalink":"aem2850.toddgerarden.com/resource/rmarkdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/rmarkdown/","section":"resource","summary":"R Markdown is regular Markdown with R code and output sprinkled in. You can do everything you can with regular Markdown, but you can incorporate graphs, tables, and other R output directly in your document.","tags":null,"title":"Using R Markdown","type":"docs"},{"authors":null,"categories":null,"content":"Learning R I highly recommend subscribing to the R Weekly newsletter. This e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.\nSearching for help with R on Google can sometimes be tricky because the program name is a single letter. Google is generally smart enough to figure out what you mean when you search for “r scatterplot”, but if it does struggle, try searching for “rstats” instead (e.g. “rstats scatterplot”). Also, since most of your R work in this class will deal with ggplot2, it’s often easier to just search for that instead of the letter “r” (e.g. “ggplot scatterplot”).\nIf you use Twitter, post R-related questions and content with #rstats. The community there is exceptionally generous and helpful. Also check out StackOverflow (a Q\u0026amp;A site with hundreds of thousands of answers to all sorts of programming questions) and RStudio Community (a forum specifically designed for people using RStudio and the tidyverse (i.e. you)).\nThese resources are also really really helpful:\n R for Data Science: A free online book for learning the basics of R and the tidyverse. R and RStudio cheat sheets: A large collection of simple cheat sheets for RStudio, ggplot2, and other R-related things. Stat 545: Dr. Jenny Bryan at RStudio has an entire introductory course in R, visualization, and data analysis online. STA 112FS: Data Science: Dr. Mine Çetinkaya-Rundel at the University of Edinburgh / Duke University has an entire introductory course in R, visualization, and data science online. CSE 631: Principles \u0026amp; Practice of Data Visualization: Yet another introductory course for R and ggplot2 by Dr. Alison Presmanes Hill at RStudio.  R in the wild A popular (and increasingly standard) way for sharing your analyses and visualizations is to post an annotated explanation of your process somewhere online. RStudio allows you to publish knitted HTML files directly to RPubs, but you can also post your output to a blog or other type of website.1 Reading these kinds of posts is one of the best ways to learn R, since they walk you through each step of the process and show the code and output.\nHere are some of the best examples I’ve come across:\n Text analysis of Trump’s tweets confirms he writes only the (angrier) Android half (with a follow-up) Bob Ross - Joy of Painting Bechdel analysis using the tidyverse: There are also a bunch of other examples using data from FiveThirtyEight. Sexism on the Silver Screen: Exploring film’s gender divide Comparison of Quentin Tarantino Movies by Box Office and the Bechdel Test Who came to vote in Utah’s caucuses? Health care indicators in Utah counties Song lyrics across the United States A decade (ish) of listening to Sigur Rós When is Tom peeping these days?: There are a also bunch of final projects from other R and data visualization classes here and here. Mapping Fall Foliage General (Attys) Distributions Disproving Approval    If you want to be really fancy, you can use blogdown, which makes a complete website with R Markdown files. That’s actually how this site is built (see the source code). You can build your own site with this tutorial. ↩︎\n   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"fd33fdc527a88c760dba0f467bb3657d","permalink":"aem2850.toddgerarden.com/resource/r/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/r/","section":"resource","summary":"Learning R I highly recommend subscribing to the R Weekly newsletter. This e-mail is sent every Monday and is full of helpful tutorials about how to do stuff with R.","tags":null,"title":"R","type":"docs"},{"authors":null,"categories":null,"content":"R style conventions R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:\nmpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) mpg %\u0026gt;% filter(cty\u0026gt;10, class==\u0026#34;compact\u0026#34;) filter(mpg,cty\u0026gt;10,class==\u0026#34;compact\u0026#34;) mpg %\u0026gt;% filter(cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) filter ( mpg,cty\u0026gt;10, class==\u0026#34;compact\u0026#34; )  But you’ll notice that only a few of those iterations (the first three) are easily readable.\nTo help improve readability and make it easier to share code with others, there’s an unofficial style guide for writing R code. It’s fairly short and just has lots of examples of good and bad ways of writing code (naming variables, dealing with long lines, using proper indentation levels, etc.)—you should glance through it some time.\nRStudio has a built-in way of cleaning up your code. Select some code, press ctrl + i (on Windows) or ⌘ + i (on macOS), and R will reformat the code for you. It’s not always perfect, but it’s really helpful for getting indentation right without having to manually hit space a billion times.\nMain style things to pay attention to for this class  Important note: I won’t ever grade you on any of this! If you submit something like filter(mpg,cty\u0026gt;10,class==\u0026#34;compact\u0026#34;), I might recommend adding spaces, but it won’t affect your grade or points or anything.\n Spacing  See the “Spacing” section in the tidyverse style guide.\n Put spaces after commas (like in regular English):\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter(mpg , cty \u0026gt; 10) filter(mpg ,cty \u0026gt; 10) filter(mpg,cty \u0026gt; 10)  Put spaces around operators like +, -, \u0026gt;, =, etc.:\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter(mpg, cty\u0026gt;10) filter(mpg, cty\u0026gt; 10) filter(mpg, cty \u0026gt;10)  Don’t put spaces around parentheses that are parts of functions:\n# Good filter(mpg, cty \u0026gt; 10) # Bad filter (mpg, cty \u0026gt; 10) filter ( mpg, cty \u0026gt; 10) filter( mpg, cty \u0026gt; 10 )  Long lines  See the “Long lines” section in the tidyverse style guide.\n It’s generally good practice to not have really long lines of code. A good suggestion is to keep lines at a maximum of 80 characters. Instead of counting characters by hand (ew), in RStudio go to “Tools” \u0026gt; “Global Options” \u0026gt; “Code” \u0026gt; “Display” and check the box for “Show margin”. You should now see a really thin line indicating 80 characters. Again, you can go beyond this—that’s fine. It’s just good practice to avoid going too far past it.\nYou can add line breaks inside longer lines of code. Line breaks should come after commas, and things like function arguments should align within the function:\n# Good filter(mpg, cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) # Good filter(mpg, cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) # Good filter(mpg, cty \u0026gt; 10, class == \u0026#34;compact\u0026#34;) # Bad filter(mpg, cty \u0026gt; 10, class %in% c(\u0026#34;compact\u0026#34;, \u0026#34;pickup\u0026#34;, \u0026#34;midsize\u0026#34;, \u0026#34;subcompact\u0026#34;, \u0026#34;suv\u0026#34;, \u0026#34;2seater\u0026#34;, \u0026#34;minivan\u0026#34;)) # Good filter(mpg, cty \u0026gt; 10, class %in% c(\u0026#34;compact\u0026#34;, \u0026#34;pickup\u0026#34;, \u0026#34;midsize\u0026#34;, \u0026#34;subcompact\u0026#34;, \u0026#34;suv\u0026#34;, \u0026#34;2seater\u0026#34;, \u0026#34;minivan\u0026#34;))  Pipes (%\u0026gt;%) and ggplot layers (+) Put each layer of a ggplot plot on separate lines, with the + at the end of the line, indented with two spaces:\n# Good ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Bad ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Super bad ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw() # Super bad and won\u0026#39;t even work ggplot(mpg, aes(x = cty, y = hwy, color = class)) + geom_point() + geom_smooth() + theme_bw()  Put each step in a dplyr pipeline on separate lines, with the %\u0026gt;% at the end of the line, indented with two spaces:\n# Good mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Bad mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Super bad mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy)) # Super bad and won\u0026#39;t even work mpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% group_by(class) %\u0026gt;% summarize(avg_hwy = mean(hwy))  Comments  See the “Comments” section in the tidyverse style guide.\n Comments should start with a comment symbol and a single space: # \n# Good #Bad #Bad  If the comment is really short (and won’t cause you to go over 80 characters in the line), you can include it in the same line as the code, separated by at least two spaces (it works with one space, but using a couple can enhance readability):\nmpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% # Only rows where cty is 10 + group_by(class) %\u0026gt;% # Divide into class groups summarize(avg_hwy = mean(hwy)) # Find the average hwy in each group  You can add extra spaces to get inline comments to align, if you want:\nmpg %\u0026gt;% filter(cty \u0026gt; 10) %\u0026gt;% # Only rows where cty is 10 + group_by(class) %\u0026gt;% # Divide into class groups summarize(avg_hwy = mean(hwy)) # Find the average hwy in each group  If the comment is really …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"844aea7aa9e8c205f7e898c3972e5c8f","permalink":"aem2850.toddgerarden.com/resource/style/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/style/","section":"resource","summary":"R style conventions R is fairly forgiving about how you type code (unlike other languages like Python, where miscounting spaces can ruin your code!). All of these things will do exactly the same thing:","tags":null,"title":"R style suggestions","type":"docs"},{"authors":null,"categories":null,"content":"Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a zip file. When you unzip a zipped file, your operating system extracts all the files that are contained inside into a new folder on your computer.\nUnzipping files on macOS is trivial, but unzipping files on Windows can mess you up if you don’t pay careful attention. Here’s a helpful guide to unzipping files on both macOS and Windows.\nUnzipping files on macOS Double click on the downloaded .zip file. macOS will automatically create a new folder with the same name as the .zip file, and all the file’s contents will be inside. Double click on the RStudio Project file (.Rproj) to get started.\nUnzipping files on Windows tl;dr: Right click on the .zip file, select “Extract All…”, and work with the resulting unzipped folder.\nUnlike macOS, Windows does not automatically unzip things for you. If you double click on the .zip file, Windows will show you what’s inside, but it will do so without actually extracting anything. This can be is incredibly confusing! Here’s what it looks like—the only clues that this folder is really a .zip file are that there’s a “Compressed Folder Tools” tab at the top, and there’s a “Ratio” column that shows how much each file is compressed.\nIt is very tempting to try to open files from this view. However, if you do, things will break and you won’t be able to correctly work with any of the files in the zipped folder. If you open the R Project file, for instance, RStudio will point to a bizarre working directory buried deep in some temporary folder:\nYou most likely won’t be able to open any data files or save anything, which will be frustrating.\nInstead, you need to right click on the .zip file and select “Extract All…\u0026#34;:\nThen choose where you want to unzip all the files and click on “Extract”\nYou should then finally have a real folder with all the contents of the zipped file. Open the R Project file and RStudio will point to the correct working directory and everything will work.\n","date":1588723200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588723200,"objectID":"f1b04d7939933ed26af8d5a9fe95387f","permalink":"aem2850.toddgerarden.com/resource/unzipping/","publishdate":"2020-05-06T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/unzipping/","section":"resource","summary":"Because RStudio projects typically consist of multiple files (R scripts, datasets, graphical output, etc.) the easiest way to distribute them to you for examples, assignments, and projects is to combine all the different files in to a single compressed collection called a zip file.","tags":null,"title":"Unzipping files","type":"docs"},{"authors":null,"categories":null,"content":"There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:\n  Data is Plural newsletter: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he’s found. You should subscribe to it. He also has an archive of all the datasets he’s highlighted.\n  Google Dataset Search: Google indexes thousands of public datasets; search for them here.\n  Kaggle: Kaggle hosts machine learning competitions where people compete to create the fastest, most efficient, most predictive algorithms. A byproduct of these competitions is a host of fascinating datasets that are generally free and open to the public. See, for example, the European Soccer Database, the Salem Witchcraft Dataset or results from an Oreo flavors taste test.\n  360Giving: Dozens of British foundations follow a standard file format for sharing grant data and have made that data available online.\n  US City Open Data Census: More than 100 US cities have committed to sharing dozens of types of data, including data about crime, budgets, campaign finance, lobbying, transit, and zoning. This site from the Sunlight Foundation and Code for America collects this data and rates cities by how well they’re doing.\n  Political science and economics datasets: There’s a wealth of data available for political science- and economics-related topics:\n François Briatte’s extensive curated lists: Includes data from/about intergovernmental organizations (IGOs), nongovernmental organizations (NGOs), public opinion surveys, parliaments and legislatures, wars, human rights, elections, and municipalities. Thomas Leeper’s list of political science datasets: Good short list of useful datasets, divided by type of data (country-level data, survey data, social media data, event data, text data, etc.). Erik Gahner’s list of political science datasets: Huge list of useful datasets, divided by topic (governance, elections, policy, political elites, etc.)    ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4c57416e3690fb647bc91955a36b3a16","permalink":"aem2850.toddgerarden.com/resource/data/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/data/","section":"resource","summary":"There are a ton of places to find data related to public policy and administration (as well as data on pretty much any topic you want) online:\n  Data is Plural newsletter: Jeremy Singer-Vine sends a weekly newsletter of the most interesting public datasets he’s found.","tags":null,"title":"Data","type":"docs"},{"authors":null,"categories":null,"content":"You can download a BibTeX file of all the non-web-based readings in the course:\n  references.bib  You can open the file in BibDesk on macOS, JabRef on Windows, or Zotero or Mendeley online.\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d599e8776d313634e5e55f089a22b902","permalink":"aem2850.toddgerarden.com/resource/citations/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/citations/","section":"resource","summary":"You can download a BibTeX file of all the non-web-based readings in the course:\n  references.bib  You can open the file in BibDesk on macOS, JabRef on Windows, or Zotero or Mendeley online.","tags":null,"title":"Citations and bibliography","type":"docs"},{"authors":null,"categories":null,"content":"Readings  The syllabus  Chapter 1 (read through 1.2, skim 1.3+) of Data Visualization by Kieran Healy  Optional Readings   Study: Charts change hearts and minds better than words do  Tim Harford, “Florence Nightingale: Data Viz Pioneer,\u0026#34; 99% Invisible  Questions to reflect on  How do we know what is true? Are facts truth? Why do we visualize data? What makes a great visualization? How do you choose which kind of visualization to use?  Slides The slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later).\n View all slides in new window  Download PDF of all slides\n:::fyi Fun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands. :::\n","date":1642796640,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1642796640,"objectID":"9f210e786ac3c6ae3a61cb9aaebcdc5c","permalink":"aem2850.toddgerarden.com/content/01-content/","publishdate":"2022-01-21T20:24:00Z","relpermalink":"aem2850.toddgerarden.com/content/01-content/","section":"content","summary":"Readings  The syllabus  Chapter 1 (read through 1.2, skim 1.3+) of Data Visualization by Kieran Healy  Optional Readings   Study: Charts change hearts and minds better than words do  Tim Harford, “Florence Nightingale: Data Viz Pioneer,\" 99% Invisible  Questions to reflect on  How do we know what is true?","tags":null,"title":"Welcome to AEM 2850 + truth, beauty, and data","type":"docs"},{"authors":null,"categories":null,"content":"You made it to the end of our whirlwind tour of data visualization principles! Congratulations!\nNow you get to show off all the tools you learned with a beautiful, truthful, narrative visualization.\nFor your final project, you will take a dataset, explore it, tinker with it, and tell a nuanced story about it using at least three graphs.\nI want this project to be as useful for you and your future career as possible—you’ll hopefully want to show off your final project in a portfolio or during job interviews.\nAccordingly, you have some choice in what data you can use for this project. I’ve found several different high-quality datasets online related to the core MPA/MPP tracks. You do not have to choose a dataset in your given field (especially if you’re not an MPA or MPP student!) Choose whatever one you are most interested in or will have the most fun with.\nData from the internet Go to this list of data sources and find something interesting! The things in the “Data is Plural” newsletter are often especially interesting and fun. Here are some different high-quality datasets that students have worked with before:\nNonprofit management  U.S. Charities and Non-profits: All of the charities and nonprofits registered with the IRS. This is actually split into six separate files. You can combine them all into one massive national database with bind_rows(), or filter the data to include specific states (or a single state). It all depends on the story you’re telling. Source: IRS. Nonprofit Grants 2010 to 2016: Nonprofit grants made in the US as listed in Schedule I of the IRS 990 tax form between 2010 to 2016. Source: IRS.  Federal, state, and local government management  Deadly traffic accidents in the UK (2015): List of all traffic-related deaths in the UK in 2015. Source: data.gov.uk. Firefighter Fatalities in the United States: Name, rank, and cause of death for all firefighters killed since 2000. Source: FEMA. Federal Emergencies and Disasters, 1953–Present: Every federal emergency or disaster declared by the President of the United States since 1953. Source: FEMA. Global Terrorism Database (1970–2016): 170,000 terrorist attacks worldwide, 1970-2016. Source: National Consortium for the Study of Terrorism and Responses to Terrorism (START), University of Maryland. City of Austin 311 Unified Data: All 311 calls to the City of Austin since 2014. Source: City of Austin.  Business management  515K Hotel Reviews Data in Europe: 515,000 customer reviews and scoring of 1,493 luxury hotels across Europe. Source: Booking.com. Chase Bank Branch Deposits, 2010–2016: Records for every branch of Chase Bank in the United States. This dataset is not quite tidy and will require a little bit of reshaping with gather() or pivot_longer(), since there are individual columns of deposits per year. Source: Chase Bank.  Instructions Here’s what you’ll need to do:\n  Download a dataset and explore it. Many of these datasets are large and will not open (well) in Excel, so you’ll need to load the CSV file into R with read_csv(). Most of these datasets have nice categorical variables that you can use for grouping and summarizing, and many have time components too, so you can look at trends. Your past problem sets and in-class examples will come in handy here.\n  Find a story in the data. Explore that story and make sure it’s true and insightful.\n  Use R to create multiple graphs to tell the story. You can make as many graphs as you want, but you must use at least three different chart types (i.e. don’t just make three scatterplots or three maps).\n  Export these figures as PDF files, place them in Adobe Illustrator (or InDesign or Gravit Designer or Inkscape), and make one combined graphic or handout where you tell the complete story. You have a lot of latitude in how you do this. You can make a graphic-heavy one-page handout. You can make something along the lines of the this, with one big graphic + smaller subgraphics + explanatory text. Just don’t make a goofy infographic. Whatever you do, the final figure must include all the graphics, must have some explanatory text to help summarize the narrative, and must be well designed.\n  Export the final graphic from Illustrator as a PDF and a PNG.\n  Write a memo using R Markdown to introduce, frame, and describe your story and figure. Use this template to get started. You should include the following in the memo:\n Executive summary Background information and summary of the data Explanation, description, and code for each individual figure Explanation and description for the final figure Final figure should be included as an image (remember ![Caption goes here](path/to/file.png))    Remember to follow R Markdown etiquette rules and style—don’t have it output extraneous messages or warnings, include summary tables in nice tables, adjust the dimensions for your figures, and remove the placeholder text that’s in the template already (i.e. I don’t want to see stuff like “Describe and show how you cleaned …","date":1627689600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627689600,"objectID":"1dfe039949fa9f2849e8b63a6bd064ee","permalink":"aem2850.toddgerarden.com/assignments/final-project/","publishdate":"2021-07-31T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/final-project/","section":"assignments","summary":"You made it to the end of our whirlwind tour of data visualization principles! Congratulations!\nNow you get to show off all the tools you learned with a beautiful, truthful, narrative visualization.","tags":null,"title":"Final project","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise, you’ll download some books from Project Gutenberg and visualize patterns in the words.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some helpful starter code. Download that here and include it in your project:\n  13-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 13-exercise.Rmd your-project-name.Rproj  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  13-exercise.zip  The example from today’s session will be incredibly helpful for this exercise.\nThis can be as simple or as complex as you want. You don’t need to make your plots super fancy, but if you’re feeling brave, experiment with changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Word frequencies Use the gutenbergr package to download 4+ books by some author on Project Gutenberg. Jane Austen, Victor Hugo, Emily Brontë, Lucy Maud Montgomery, Arthur Conan Doyle, Mark Twain, Henry David Thoreau, Fyodor Dostoyevsky, Leo Tolstoy. Anyone. Just make sure it’s all from the same author. The example page shows how to do that.\nAlternatively, you can try using text from a source other than Project Gutenberg. Check out, for instance, harrypotter (the full text of all 7 Harry Potter books), quRan (the full text of the Qur’an; here’s an example of some text analysis with it), or scriptuRs (the full text of the King James Version of the Bible; here’s an example of some text analysis with it).\nMake these two plots and describe what each tell about your author’s books: (you’ll probably want to facet by book)\n Top 10 most frequent words in each book Top 10 most unique words in each book (i.e. tf-idf)  100% optional bonus fun tasks If you want, do some other things with the text you’ve downloaded. Make a “he verbs vs. she verbs” plot. Tag the parts of speech and find the most common verbs or nouns. Try some sentiment analysis. Do something fun.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1627257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627257600,"objectID":"ea7998f8bd47381a77be8bdca041b036","permalink":"aem2850.toddgerarden.com/assignments/13-exercise/","publishdate":"2021-07-26T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/13-exercise/","section":"assignments","summary":"Getting started For this exercise, you’ll download some books from Project Gutenberg and visualize patterns in the words.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.","tags":null,"title":"Text","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise, you’ll export a PDF and/or an SVG from R, open it in Adobe Illustrator (free for GSU students) or Gravit Designer (free for the basic version), add annotations and make minor edits, and then export a final polished version.\nI have given you 100% of the R code you need to use. All you have to do is run it. You need to download one CSV file:\n  hot-dog-contest-winners.csv  You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with all the code you’ll need. Download that here and include it in your project:\n  14-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 14-exercise.Rmd your-project-name.Rproj data\\ hot-dog-contest-winners.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  14-exercise.zip  Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: Hot dog eating contest winners Recreate this plot (or something like it):\nCreate and save a basic bar chart of hot dog eating contest winners using the code provided. Open the resulting file in Illustrator or Gravit Designer. Open the PDF in Illustrator; open the SVG in Gravit Designer.\nBe sure that you save your file in Illustrator or Gravit Designer with a different name. You don’t want to accidentally overwrite all your enhancements and updates when you knit this document. That would be so sad.\nYou don’t have data prior to 1980, so don’t worry about recreating that half of the graph. You don’t have to put all the text boxes in exactly the same locations—you can even do a completely different design and add different annotations if you want.\nThe point of this assignment is to help you get familiar with vector editing software, so don’t stress out about R issues or graphic design issues (though try to follow CRAP where possible).\nTo save you some typing, here’s all the text from the original plot. Copy and paste it into your enhanced version (or change the text if you want—again, do whatever you want):\n Winners from Nathan’s Hot Dog Eating Contest It’s that time of year again. Since 1916, the annual eating competition has grown substantially attracting competitors from around the world Frank Dellarosa eats 21 and a half HDBs over 12 minutes, breaking the previous record of 19 and a half Through 2001-2005, Takeru Kobayashi wins by no less than 12 HDBs. In 2006 he only wins by 1.75. After winning 6 years in a row and setting the world record 4 times, Kobayashi places second in 2007. For the first time since 1999, an American reclaims the title when Joey Chestnut consumes 66 HDBs, a new world record. Chestnut repeats in 2008. Source: Wikipedia and Nathan’s Famous  Turning everything in When you’re all done, knit your R Markdown file and use Illustrator or Gravit Designer to export a PDF or PNG version (or both) of your enhanced plot. Upload these files to iCollege.\n","date":1627257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627257600,"objectID":"adf84baf72a202babb4a77ba189bbd28","permalink":"aem2850.toddgerarden.com/assignments/14-exercise/","publishdate":"2021-07-26T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/14-exercise/","section":"assignments","summary":"Getting started For this exercise, you’ll export a PDF and/or an SVG from R, open it in Adobe Illustrator (free for GSU students) or Gravit Designer (free for the basic version), add annotations and make minor edits, and then export a final polished version.","tags":null,"title":"Enhancing graphics","type":"docs"},{"authors":null,"categories":null,"content":"Publishing your stuff online Quickest and easiest way: RPubs The easiest way to get a knitted R Markdown onto the internet is to use RPubs. We talked about this in session 10, and you used it to turn in exercise 10. After knitting an HTML document in RStudio, click on the “Publish” button in the top right corner to upload the document to the RPubs server and get a URL that you can share with others:\nYou don’t have to set up a web server or anything—it’s all pretty automatic and seamless.\nGreat for standalone projects: R Markdown websites If you have something slightly more complex, like a collection of R Markdown files that do related things, it’s easy to stitch them all together in an R Markdown website. RStudio supports these automatically—after telling RStudio to consider an RStudio project to be a website, it will knit all the .Rmd files in the root of your project directory every time you click on the “Build Website” button.\nRStudio generates a standalone folder named public with static HTML pages of all your knitted documents. You then have to put that folder on the internet somewhere, either on a web server you have access to, or a free service like Netlify.\nSee this page for complete documentation, or follow these tutorials by Lucy D’Agostino McGowan and Emily Zabor.\nThese websites are especially helpful for standalone projects like research papers and reports. I’ve had students do their master’s capstone projects with these, with specific pages for their introduction, literature review, data cleaning, exploratory data analysis, modeling, and results.\nI typically make a website for each of my research projects and will include pages with IRB details, copies of survey experiments, data cleaning, results, and so on. Here are some examples:\n NGO Crackdowns and Philanthropy Are Donors Really Responding? The Power of Ranking Constraint Closure  You can also make really neat small websites like Desirée De Leon’s Teacup Giraffes for teaching basic statistics.\nMore complex blogs and websites: blogdown If you want more control (i.e. total control) over the HTML output and the structure of a website, you can use a package named blogdown to convert R Markdown files into an entire website. This course website is built with blogdown: you can see all the underlying R Markdown files at GitHub.\nLike R Markdown websites, blogdown generates a complete static version of the knitted website and puts it in a folder named public. You’re then responsible for putting that somewhere on the internet, either on your own server or by using a free hosting service like Netlify.\nBlogdown is incredibly well documented, and there are lots of tutorials for how to get started. Alison Hill’s tutorial here is the best place to get started—follow it and you’ll have a basic blog completely free.\nBooks, dissertations, and theses: bookdown If you don’t want to create a website, you can use a package named bookdown to stitch a collection of R Markdown files into a PDF, Word, or HTML book. (You could even put all your exercises from this class into a single book!). bookdown is incredibly well documented too (as a bookdown book), and you can get familiar with it fairly quickly.\nDozens of real-world books, dissertations, and theses have been written with bookdown, including both Claus Wilke’s and Kieran Healy’s books from this course. Because of the magic of Markdown, you can create parallel HTML and PDF versions of your book and post one type of output on the internet and print and bind the other one.\nSlides: xaringan R Markdown isn’t just for PDF, Word, and HTML documents. You can also make slides! All the slides for this course were made in R Markdown with a package named xaringan. You can see the documentation here, and see the main example presentation here. You can also see all the R Markdown files I wrote to create the slides for this class here.\nCode: GitHub and GitHub gists And finally, if you want to share code (and keep track of versions of your code), GitHub is one of the best places for that. Posting your code at places like GitHub lets other people see and borrow and adapt and make suggestions to your code. You can see all my different repositories and projects here, for example.\nJenny Bryan has a useful bookdown website explaining how to get started, and GitHub itself has excellent materials for learning how to use git.\nIf you don’t want to go through the process of creating a full-blown git repository, GitHub also lets you make “gists”, which are single shareable files of code. (See all mine here for examples). Gists are excellent ways to share reproducible examples (or reprexes), and the reprex package in R generates output that you can paste directly into a new gist for sharing (see this one, for instance, which I used to show someone how to run and plot logistic regression with R).\nTelling stories with data If you’re interested in learning more about data storytelling and science communication, check out these resources: …","date":1627257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627257600,"objectID":"9faee53cf701bae760032220d58493b5","permalink":"aem2850.toddgerarden.com/example/15-example/","publishdate":"2021-07-26T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/15-example/","section":"example","summary":"Publishing your stuff online Quickest and easiest way: RPubs The easiest way to get a knitted R Markdown onto the internet is to use RPubs. We talked about this in session 10, and you used it to turn in exercise 10.","tags":null,"title":"Sharing R output online","type":"docs"},{"authors":null,"categories":null,"content":"For your final exercise, you won’t do anything with R. You’ll instead have two writing tasks. You can write these in R Markdown if you want, or you can do it in Word or Google Docs or wherever else.\nTask 1: Storytelling reflection Write your standard reflection about the storytelling readings and videos.\nTask 2: Summary reflection Write a longer (400ish words) reflection on what you learned in the course in general. What was new? What was exciting? What will you remember? How has this class changed the way you look at data and graphics?\nYou might explore a few of these summative questions (but definitely don’t just go through and answer each of these!):\n What is truth? How do we find truth? Are facts truth? What’s the difference between content and form? Does beauty matter when describing truth? How does any of this philosophical humanities stuff relate to data visualization?  Turning everything in When you’re all done, upload the document with both reflection to iCollege.\nCongratulations! You did it!\n","date":1627257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627257600,"objectID":"348b632aa6e3ed7d87227d618f609205","permalink":"aem2850.toddgerarden.com/assignments/15-exercise/","publishdate":"2021-07-26T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/15-exercise/","section":"assignments","summary":"For your final exercise, you won’t do anything with R. You’ll instead have two writing tasks. You can write these in R Markdown if you want, or you can do it in Word or Google Docs or wherever else.","tags":null,"title":"Truth, beauty, and data revisited","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise, you’ll visualize something over time. You can use whatever data you want. Use a dataset from a past exercise, use one of the built-in datasets like gapminder from the gapminder package, download stuff from the World Bank with the WDI package, or download stuff from FRED using the tidyquant package.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  11-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 11-exercise.Rmd your-project-name.Rproj data\\ WHATEVER.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  11-exercise.zip  The example from today’s session shows how to get data from FRED, and the examples from sessions 8 and 9 show. You can also use gapminder, or any other dataset that includes a time-related column (so not mpg).\nThere’s no specific way you should visualize time. Show it as a line, or as bars, or with a heatmap, or with ridgeplots, or with whatever is most appropriate for the story you’re telling. You do not have to recreate the example from today. You’re free to do whatever you want!\nThis can be as simple or as complex as you want. You don’t need to make your plot super fancy, but if you’re feeling brave, experiment with changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Visualizing time Do the following:\n  Load some time-related data\n  Make a plot to show how that data changes over time.\n  Explain why you chose to visualize the data the way you did.\n  Turning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"67444c307bf717184fb4cf59b7142743","permalink":"aem2850.toddgerarden.com/assignments/11-exercise/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/11-exercise/","section":"assignments","summary":"Getting started For this exercise, you’ll visualize something over time. You can use whatever data you want. Use a dataset from a past exercise, use one of the built-in datasets like gapminder from the gapminder package, download stuff from the World Bank with the WDI package, or download stuff from FRED using the tidyquant package.","tags":null,"title":"Time","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise, you’ll visualize the proportion of the world that uses the interent. You’ll use data from Max Roser’s Our World in Data project, which collects all sorts of interesting cross-national data. You’ll also use national shapefiles from Natural Earth.\nDownload these two data files:\n  share-of-individuals-using-the-internet-1990-2015.csv  ne_110m_admin_0_countries.zip. This is the “110m Admin 0—Countries” shapefile from Natural Earth. It will download as a .zip file. Unzip the file and move the entire ne_110m_admin_0_countries directory into your data folder.  You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and join the two datasets. Download that here and include it in your project:\n  12-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 12-exercise.Rmd your-project-name.Rproj data\\ share-of-individuals-using-the-internet-1990-2015.csv ne_110m_admin_0_countries/ ... ne_110m_admin_0_countries.shp ...  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  12-exercise.zip  The example from today’s session shows how to load and plot shapefiles and will be incredibly helpful as you do this exercise.\nThis can be as simple or as complex as you want. You don’t need to make your plot super fancy, but if you’re feeling brave, experiment with changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: World map Make a map showing the proportion of individuals in each country that had access to the internet in 2015.\n I’ve provided some starter code in the R Markdown file. You’ll want to fill each country by the users column. Make sure you choose a good projection. See the “Projections and coordinate reference systems” section from the example.  Bonus optional extra fun: Use your comparison/time skills to show the change in internet access between 2000 and 2015, perhaps with facetting some years, or calculating ratios or proportions or percent changes\nBonus (optional) task!: Personal map Draw your own map with your own points. This could be a map of places you’ve lived, or a map of places you’ve visited, or a map of places you want to visit. Anything!\nThe only requirement is that you find an appropriate shapefile (states, counties, world, etc.), collect latitude and longitude data from Google Maps, and plot the points (with or without labels) on a map. Use multiple shapefiles if you want—add roads, rivers, lakes, whatever.\nHint: Basically follow the code from the example in the section named “Making your own geoencoded data”\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"3dec7aacea4b7eb499e70530f0192ca7","permalink":"aem2850.toddgerarden.com/assignments/12-exercise/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/12-exercise/","section":"assignments","summary":"Getting started For this exercise, you’ll visualize the proportion of the world that uses the interent. You’ll use data from Max Roser’s Our World in Data project, which collects all sorts of interesting cross-national data.","tags":null,"title":"Space","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re going to use the text of Little Women by Louisa May Alcott and four Shakespearean tragedies (Romeo and Juliet, King Lear, Macbeth, and Hamlet) to explore how to do some basic text visualization.\nYou can follow along if you want, but don’t feel like you have too. This is mostly just to give you a taste of different methods for visualizing text. It’s by no means comprehensive, but it is well annotated and commented and should (hopefully) be easy to follow.\nIf you want to play with part-of-speech tagging, you can download an already-tagged version of Little Women here (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  little_women_tagged.csv  If you want to see other examples of text visualizations with the tidytext package, check out some of these:\n  Harry Potter Sentiment Analysis for Beginners (this uses the harrypotter package, which you can install from GitHub (not from CRAN))  Peer Christensen “Fair is foul, and foul is fair: a tidytext sentiment analysis of Shakespeare’s tragedies”  “Tidy text, parts of speech, and unique words in the Bible”  “Tidy text, parts of speech, and unique words in the Qur’an”  Live coding example   Complete code (This is a highly cleaned up version of the code from the video.)\nGet data First, as always, we’ll load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, etc. library(tidytext) # For neat text things library(gutenbergr) # For downloading books from Project Gutenberg  We’re going to use the gutenbergr package to download some books directly from Project Gutenberg. The IDs for these books come from the URLs at their website. For instance, Little Women is book #514. We’ll store these books as *_raw and then clean them up later.\n# 514 Little Women little_women_raw \u0026lt;- gutenberg_download(514, meta_fields = \u0026#34;title\u0026#34;) # 1524 - Hamlet # 1532 - King Lear # 1533 - Macbeth # 1513 - Romeo and Juliet tragedies_raw \u0026lt;- gutenberg_download(c(1524, 1532, 1533, 1513), meta_fields = \u0026#34;title\u0026#34;)  If you won’t want to redownload the books every time you knit (you don’t), you can do the same trick we’ve used for WDI and FRED data. Put the actual code for getting the books in a chunk with eval=FALSE on it and run it manually in RStudio when you want to get the data. Then you can write the downloaded data as a CSV file, and then load it invisibly from the CSV file when you knit:\nI first download data from Project Gutenberg: ```{r get-book, eval=FALSE} books_raw \u0026lt;- gutenberg_download(...) write_csv(books_raw, \u0026#34;data/books_raw.csv\u0026#34;) ``` ```{r load-book-data-real, include=FALSE} books_raw \u0026lt;- read_csv(\u0026#34;data/books_raw.csv\u0026#34;) ```  Clean data The data you get from Project Gutenberg comes in a tidy format, with a column for the book id, a column for the title, and a column for text. Sometimes this text column will be divided by lines in the book; sometimes it might be an entire page or paragraph or chapter. It all depends on how the book is formatted at Project Gutenberg.\nHere’s what the start of our little_women_raw data looks like:\nhead(little_women_raw)  ## # A tibble: 6 x 3 ## gutenberg_id text title ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 514 LITTLE WOMEN Little Women ## 2 514 \u0026lt;NA\u0026gt; Little Women ## 3 514 \u0026lt;NA\u0026gt; Little Women ## 4 514 by Little Women ## 5 514 \u0026lt;NA\u0026gt; Little Women ## 6 514 Louisa May Alcott Little Women  If we look at the data in RStudio, we can see that the actual book doesn’t start until row 70 (the first 69 rows are the table of contents and other parts of the front matter).\nIt would be nice if we had a column that indicated what chapter each line is in, since we could then group by chapter and look at patterns within chapters. Since the data doesn’t come with a chapter column, we have to make one ourselves using a fun little trick. Each chapter in the book starts with “CHAPTER ONE” or “CHAPTER TWO”, with “chapter” in ALL CAPS. We can make a variable named chapter_start that will be true if a line starts with “CHAPTER” and false if not. Then we can use the cumsum() function to take the cumulative sum of this column, which will increment up one number ever time there’s a new chapter, thus creating a helpful chapter column.\n# Clean up Little Women little_women \u0026lt;- little_women_raw %\u0026gt;% # The actual book doesn\u0026#39;t start until line 70 slice(70:n()) %\u0026gt;% # Get rid of rows where text is missing drop_na(text) %\u0026gt;% # Chapters start with CHAPTER X, so mark if each row is a chapter start # cumsum() calculates the cumulative sum, so it\u0026#39;ll increase every time there\u0026#39;s # a new chapter and automatically make chapter numbers mutate(chapter_start = str_detect(text, \u0026#34;^CHAPTER\u0026#34;), chapter_number = cumsum(chapter_start)) %\u0026gt;% # Get rid of these columns select(-gutenberg_id, -title, -chapter_start) head(little_women)  ## # A tibble: 6 x 2 ## text chapter_number ## \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; ## 1 \u0026#34;CHAPTER ONE\u0026#34; 1 ## 2 \u0026#34;PLAYING PILGRIMS\u0026#34; 1 ## 3 \u0026#34;\\\u0026#34;Christmas won\u0026#39;t be Christmas without any presents,\\\u0026#34; grumbled Jo, lying\u0026#34; 1 ## 4 \u0026#34;on the rug.\u0026#34; 1 ## 5 \u0026#34;\\\u0026#34;It\u0026#39;s so dreadful to be poor!\\\u0026#34; sighed Meg, …","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"b207a4f96c491474ee42e89b7a257bcf","permalink":"aem2850.toddgerarden.com/example/13-example/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/13-example/","section":"example","summary":"For this example, we’re going to use the text of Little Women by Louisa May Alcott and four Shakespearean tragedies (Romeo and Juliet, King Lear, Macbeth, and Hamlet) to explore how to do some basic text visualization.","tags":null,"title":"Text","type":"docs"},{"authors":null,"categories":null,"content":"Why enhance graphics? The content from today isn’t really code-based at all. Instead, you’re learning about how to take a plot from R and make it fancy in a vector editing program like Illustrator, Gravit Designer, or Inkscape.\nThis concept comes from a common workflow in the real world, where organizations like news outlets, think tanks, research centers, or nonprofits will publish highly polished plots in annual reports, magazines, and other types of publications. These graphics often have to follow specific in-house style guidelines and use specific colors and fonts and other design elements. Even if you don’t work for a place with in-house style guides, you’ll often want to make some edits to your plots by hand after you create them.\nThe general workflow goes like this:\n Create a plot in R and ggplot Export that plot as a vector image (either a PDF or an SVG) Edit and enhance the vector image in a vector editor, like Adobe Illustrator Export the polished version from Illustrator as either a PDF or PNG (or both)  Big data-focused organizations have been using a process like this for years. Nathan Yau describes this whole process in his 2011 book Visualize This and the book contains a bunch of tutorials to help you learn how create something in R, export it, and edit it in Illustrator.\nFor instance, in his first chapter, he guides you through the process of creating the skeleton of this chart in R, exporting it as a PDF, and adding all the titles and annotations and arrows and extra lines in Illustrator (original post from 2008):\nEnhancing graphics in 2021 In 2011, that was the best possible workflow because ggplot couldn’t deal with subtitles, captions, repelled labels, embedded fonts, and differently-styled text (like bold in the middle of a title). Illustrator was the only way to do this stuff.\nNowadays in 2021, though, you can do nearly all of this annotating and enhancing with packages like ggtext and patchwork and ggrepel. You can almost perfectly replicate in-house style guides with the theme() function and put text and arrows and labels and text boxes wherever you want with annotate(). It’s a brave exciting new world.\nYou still can’t do everything with R. ggplot can’t create fancy font ligatures like “ﬁ” in words that have an “f” followed by an “i”, and it can’t handle automatic hyphenation and full text justification, among other limitations. But these are the minorest of graphic design issues (and the ggplot team is working on them!).\nThat all said, it’s still often faster and easier to make edits to your graphs in Illustrator rather than fight with a reluctant annotate() layer that just won’t put an arrow exactly where you want. And ggtext is so new that lots of people haven’t heard of it yet. This is all cutting edge stuff.\nSo it’s still a good idea to understand how to follow the standard workflow of exporting from R and enhancing in Illustrator.\nAbbreviated example In this video I use the code for the hot dog plot that I provide in today’s assignment to create a plot, export it, and make edits to it both in Illustrator and Gravit Designer. It’s not a complete example at all, but I show you the general process for adding text and lines and editing plot elements.\n  ","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"ab8b2bf5fbb852aba5b23af21ca8cbe8","permalink":"aem2850.toddgerarden.com/example/14-example/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/14-example/","section":"example","summary":"Why enhance graphics? The content from today isn’t really code-based at all. Instead, you’re learning about how to take a plot from R and make it fancy in a vector editing program like Illustrator, Gravit Designer, or Inkscape.","tags":null,"title":"Enhancing graphics","type":"docs"},{"authors":null,"categories":null,"content":"The United States has resettled more than 600,000 refugees from 60 different countries since 2006.\nIn this mini project, you will use R, ggplot, and Illustrator, Inkscape, or Gravit Designer to explore where these refugees have come from.\nInstructions Here’s what you need to do:\n  Create a new RStudio project and place it on your computer somewhere. Open that new folder in Windows File Explorer or macOS Finder (however you navigate around the files on your computer), and create two subfolders there named data and output.\n  Download the Department of Homeland Security’s annual count of people granted refugee status between 2006-2015:\n DHS refugees, 2006-2015\nPlace this in the data subfolder you created in step 1. You might need to right click on this link and choose “Save link as…”, since your browser may try to display it as text. This data was originally uploaded by the Department of Homeland Security to Kaggle, and is provided with a public domain license.\n  Create a new R Markdown file and save it in your project. In RStudio go to File \u0026gt; New File \u0026gt; R Markdown…, choose the default options, and delete all the placeholder text in the new file except for the metadata at the top, which is between --- and ---.\n  Verify that your project folder is structured like this:\nyour-project-name/ your-analysis.Rmd your-project-name.Rproj data/ refugee_status.csv output/ NOTHING    Clean the data using the code I’ve given you below.\n  Summarize the data somehow. There is data for 60 countries over 10 years, so you’ll probably need to aggregate or reshape the data somehow (unless you do a 60-country sparkline). I’ve included some examples down below.\n  Create an appropriate time-based visualization based on the data. I’ve shown a few different ways to summarize the data so that it’s plottable down below. Don’t just calculate overall averages or totals per country—the visualization needs to deal with change over time. Do as much polishing and refining in R—make adjustments to the colors, scales, labels, grid lines, and even fonts, etc.\n  Save the figure as a PDF. Use ggsave(plot_name, filename = \u0026#34;output/blah.pdf\u0026#34;, width = XX, height = XX)\n  Refine and polish the saved PDF in Illustrator or Inkscape or Gravit Designer, adding annotations, changing colors, and otherwise enhancing it.\n  Export the polished image as a PDF and a PNG file.\n  Write a memo (no word limit) explaining your process. I’m specifically looking for the following:\n What story are you telling with your graphic? How did you apply the principles of CRAP? How did you apply Kieran Healy’s principles of great visualizations or Alberto Cairo’s five qualities of great visualizations?    Upload the following outputs to iCollege:\n A PDF or Word file of your memo with your final code, intermediate graphic (the one you create in R), and final graphic (the one you enhance) in it. Remember to use ![Caption](path/to/figure/here) to place external images in Markdown. A standalone PNG version of your graphic. You’ll export this from Illustrator or Inkscape. A standalone PDF version of your graphic. You’ll export this from Illustrator or Inkscape.    You will be graded based on completion using the standard ✓ system, but I’ll provide comments on how you use R and ggplot2, how well you apply the principles of CRAP, The Truthful Art, and Effective Data Visualization, and how appropriate the graph is for the data and the story you’re telling. I will use this rubric to make comments and provide you with a simulated grade.\n  mini-project-2-rubric.pdf  For this assignment, I am less concerned with the code (that’s why I gave most of it to you), and more concerned with the design. Choose good colors based on palettes. Choose good, clean fonts. Use the heck out of theme(). Add informative design elements in Illustrator/Inkscape/Gravit Designer. Make it look beautiful and CRAPpy. Refer to the design resources here.\nThe assignment is due by 11:59 PM on Monday, July 19.\nPlease seek out help when you need it! You know enough R (and have enough examples of code from class and your readings) to be able to do this. Your project has to be turned in individually, and your visualization should be your own (i.e. if you work with others, don’t all turn in the same graph), but you should work with others! Reach out to me for help too—I’m here to help!\nYou can do this, and you’ll feel like a budding dataviz witch/wizard when you’re done.\nData cleaning code The data isn’t perfectly clean and tidy, but it’s real world data, so this is normal. Because the emphasis for this assignment is on design, not code, I’ve provided code to help you clean up the data.\nThese are the main issues with the data:\n  There are non-numeric values in the data, like -, X, and D. The data isn’t very well documented; I’m assuming - indicates a missing value, but I’m not sure what X and D mean, so for this assignment, we’ll just assume they’re also missing.\n  The data generally includes rows for dozens of countries, but …","date":1626652800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626652800,"objectID":"0f5d935c4723bc19f948847aff3fe641","permalink":"aem2850.toddgerarden.com/assignments/02-mini-project/","publishdate":"2021-07-19T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/02-mini-project/","section":"assignments","summary":"The United States has resettled more than 600,000 refugees from 60 different countries since 2006.\nIn this mini project, you will use R, ggplot, and Illustrator, Inkscape, or Gravit Designer to explore where these refugees have come from.","tags":null,"title":"Mini project 2","type":"docs"},{"authors":null,"categories":null,"content":"This exercise is a little different from past ones because you will not knit to PDF or Word. Pay attention to the instructions below.\nGetting started For this exercise, you’ll use whatever data you want to create an interactive HTML plot and a dashboard. Use a dataset from a past exercise, use one of the built-in datasets like mpg or gapminder from the gapminder package, download stuff from the World Bank using the WDI package, or use something from this list of datasets.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  10-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 10-exercise.Rmd your-project-name.Rproj data\\ WHATEVER.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  10-exercise.zip  The example for today’s session will be helpful as you tinker with ggplotly(), and the resources listed at the bottom of the example will be helpful for making a dashboard.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Interactive plots In the R Markdown file with your reflection, create an interactive plot with ggplotly() from the plotly package. Modify the tooltip to show something more useful than every single mapped aesthetic.\nTask 3: Dashboard Install the flexdashboard package and create a new R Markdown file in your project by going to File \u0026gt; New File… \u0026gt; R Markdown… \u0026gt; From Template \u0026gt; Flexdashboard.\nUsing the documentation for flexdashboard online, create a super basic dashboard that shows a plot (static or interactive) in at least two chart areas. Play with the layout if you’re feeling brave.\nTurning everything in Here’s where this is all different this time. You will not upload a knitted PDF or Word file to iCollege, since those can’t handle interactivity. Instead, do this:\n  Knit the document with Tasks 1 and 2 in it to HTML and publish it to RPubs using the “Publish document” menu in the preview of the knitted file. Take note of the URL.\n  Knit the dashboard from Task 3 to HTML and publish it to RPubs using the same menu. Take note of the URL.\n  In iCollege, paste the two URLs into the submission form for exercise 10 following this template:\nTask 1 and 2: URL HERE Task 3 dashboard: URL HERE    ","date":1626048e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626048e3,"objectID":"e959e4d03bc9b5606dbde767083eda7e","permalink":"aem2850.toddgerarden.com/assignments/10-exercise/","publishdate":"2021-07-12T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/10-exercise/","section":"assignments","summary":"This exercise is a little different from past ones because you will not knit to PDF or Word. Pay attention to the instructions below.\nGetting started For this exercise, you’ll use whatever data you want to create an interactive HTML plot and a dashboard.","tags":null,"title":"Interactivity","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re going to use economic data from the US Federal Reserve (the Fed). The St. Louis Fed is in charge of publishing Fed economic data, and they host it all at an online portal named FRED. Instead of downloading individual time series data from the FRED website, we’ll do what with did with the World Bank WDI data and download it directly from the internet with the tidyquant package, which includes a function for working with the FRED API/website.\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  fred_raw.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nGet data First, we load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(tidyquant) # For accessing FRED data library(scales) # For nicer labels  The US Federal Reserve provides thousands of economic datasets at FRED. We can use the tidyquant R package to access their servers and download the data directly into R.\nLike we did with the WDI indicators in session 8, we need to find the special internal code for the variables we want to get. We need to pay close attention to the details of each variable, since the same measure can be offered with different combinations of real (adjusted for inflation) or nominal (not adjusted for inflation); monthly, quarterly, or annually; and seasonally adjusted or not seasonally adjusted. For instance, if you want to see US GDP, here are some possibilities (all the possible GDP measures are listed here):\n GDPC1: Real (2012 dollars), quarterly, seasonally adjusted ND000334Q: Real (2012 dollars), quarterly, not seasonally adjusted GDPCA: Real (2012 dollars), annual, not seasonally adjusted GDP: Nominal, quarterly, seasonally adjusted GDPA: Nominal, annual, not seasonally adjusted  The code for getting data from FRED works a little differently than WDI(), and the output is a little different too, but it’s hopefully not too complicated. We need to feed the tq_get() function (1) a list of indicators we want, (2) a source for those indicators, and (3) a starting and/or ending date.\ntq_get() can actually get data from a ton of different sources like stocks from Yahoo Finance and general financial data from Bloomberg, Quandl, and Tiingo. Most of those other sources require a subscription and a fancy API key that logs you into their servers when getting data, but FRED is free (yay public goods!).\nWe’ll first make a new dataset named fred_raw that gets a bunch of interesting variables from FRED from January 1, 1990 until today.\nfred_raw \u0026lt;- tq_get(c(\u0026#34;RSXFSN\u0026#34;, # Advance retail sales \u0026#34;GDPC1\u0026#34;, # GDP \u0026#34;ICSA\u0026#34;, # Initial unemployment claims \u0026#34;FPCPITOTLZGUSA\u0026#34;, # Inflation \u0026#34;UNRATE\u0026#34;, # Unemployment rate \u0026#34;USREC\u0026#34;), # Recessions get = \u0026#34;economic.data\u0026#34;, # Use FRED from = \u0026#34;1990-01-01\u0026#34;)  Downloading data from FRED every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won’t be able to get the data). As with the World Bank data we used, it’s good practice to save this raw data as a CSV file and then work with that.\nwrite_csv(fred_raw, \u0026#34;data/fred_raw.csv\u0026#34;)  Since we care about reproducibility, we still want to include the code we used to get data from FRED, we just don’t want it to actually run. You can include chunks but not run them by setting eval=FALSE in the chunk options. In this little example, we show the code for downloading the data, but we don’t evaluate the chunk. We then include a chunk that loads the data from a CSV file with read_csv(), but we don’t include it (include=FALSE). That way, in the knitted file we see the WDI() code, but in reality it’s loading the data from CSV. Super tricky.\nI first download data from FRED: ```{r get-fred-data, eval=FALSE} fred_raw \u0026lt;- tq_get(...) write_csv(fred_raw, \u0026#34;data/fred_raw.csv\u0026#34;) ``` ```{r load-fred-data-real, include=FALSE} fred_raw \u0026lt;- read_csv(\u0026#34;data/fred_raw.csv\u0026#34;) ```  Look at and clean data The data we get from FRED is in a slightly different format than we’re used to with WDI(), but with good reason. With World Bank data, you get data for every country and every year, so there are rows for Afghanistan 2000, Afghanistan 2001, etc. You then get a column for each of the variables you want (population, life expectancy, GDP/capita, etc.)\nWith FRED data, that kind of format doesn’t work for every possible time series variable because time is spaced differently. If you want to work with annual GDP, you should have a row for each year. If you want quarterly GDP, you should have a row for every quarter. If you put these in the same dataset, you’ll end up with all sorts of missing data issues:\n   time annual_gdp quarterly_gdp     2019, Q1 X X   2019, Q2  X   2019, Q3  X   2019, Q4  X   2020, Q1 X X   2020, Q2  X    To fix this, the tidyquant package gives you data in tidy (or long) form and only provides three columns:\nhead(fred_raw)  ## # A tibble: 6 x 3 …","date":1626048e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626048e3,"objectID":"32cea0f7ebe12bf55beaeb5f2e880253","permalink":"aem2850.toddgerarden.com/example/11-example/","publishdate":"2021-07-12T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/11-example/","section":"example","summary":"For this example, we’re going to use economic data from the US Federal Reserve (the Fed). The St. Louis Fed is in charge of publishing Fed economic data, and they host it all at an online portal named FRED.","tags":null,"title":"Time","type":"docs"},{"authors":null,"categories":null,"content":"Shapefiles Shapefiles are special types of data that include information about geography, such as points (latitude, longitude), paths (a bunch of connected latitudes and longitudes) and areas (a bunch of connected latitudes and longitudes that form a complete shape). Nowadays, most government agencies provide shapefiles for their jurisdictions. For global mapping data, you can use the Natural Earth project:\n Natural Earth US Census Bureau Georgia GIS Clearinghouse (requires a free account; the interface is incredibly clunky) Atlanta Regional Council Fulton County GIS Portal City of Atlanta, Department of City Planning  Projections and coordinate reference systems As you read in this week’s readings, projections matter a lot for maps. You can convert your geographic data between different coordinate systems (or projections)1 fairly easily with sf. You can use coord_sf(crs = st_crs(\u0026#34;XXXX\u0026#34;)) to convert coordinate reference systems (CRS) as you plot, or use st_transform() to convert data frames to a different CRS.\nThere are standard indexes of more than 4,000 of these projections (!!!) at epsg.io.\nSuper important: When using these projections, you need to specify both the projection catalog (ESRI or EPSG; see here for the difference) and the projection number, separated by a colon (e.g. “ESRI:54030\u0026#34;). Fortunately epsg.io makes this super easy: go to the epsg.io page for the projection you want to use and the page title will have the correct name.\nHere are some common ones:\n ESRI:54002: Equidistant cylindrical projection for the world2 EPSG:3395: Mercator projection for the world ESRI:54008: Sinusoidal projection for the world ESRI:54009: Mollweide projection for the world ESRI:54030: Robinson projection for the world (This is my favorite world projection.) EPSG:4326: WGS 84: DOD GPS coordinates (standard −180 to 180 system) EPSG:4269: NAD 83: Relatively common projection for North America ESRI:102003: Albers projection specifically for the contiguous United States  Alternatively, instead of using these index numbers, you can use any of the names listed here, such as:\n \u0026#34;+proj=merc\u0026#34;: Mercator \u0026#34;+proj=robin\u0026#34;: Robinson \u0026#34;+proj=moll\u0026#34;: Mollweide \u0026#34;+proj=aeqd\u0026#34;: Azimuthal Equidistant \u0026#34;+proj=cass\u0026#34;: Cassini-Soldner  Shapefiles to download I use a lot of different shapefiles in this example. To save you from having to go find and download each individual one, you can download this zip file:\n  shapefiles.zip  Unzip this and put all the contained folders in a folder named data if you want to follow along. You don’t need to follow along!\nYour project should be structured like this:\nyour-project-name\\ some-name.Rmd your-project-name.Rproj data\\ cb_2018_us_county_5m\\ ... cb_2018_us_county_5m.shp ... cb_2018_us_state_20m\\ ne_10m_admin_1_states_provinces\\ ne_10m_lakes\\ ne_10m_rivers_lake_centerlines\\ ne_10m_rivers_north_america\\ ne_110m_admin_0_countries\\ schools_2009\\  These shapefiles all came from these sources:\n  World map: 110m “Admin 0 - Countries” from Natural Earth  US states: 20m 2018 state boundaries from the US Census Bureau  US counties: 5m 2018 county boundaries from the US Census Bureau  US states high resolution: 10m “Admin 1 – States, Provinces” from Natural Earth  Global rivers: 10m “Rivers + lake centerlines” from Natural Earth  North American rivers: 10m “Rivers + lake centerlines, North America supplement” from Natural Earth  Global lakes: 10m “Lakes + Reservoirs” from Natural Earth  Georgia K–12 schools, 2009: “Georgia K-12 Schools” from the Georgia Department of Education (you must be logged in to access this)  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad and look at data First we’ll load the libraries we’re going to use:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(sf) # For GIS magic  Next we’ll load all the different shapefiles we downloaded using read_sf():\n# Download \u0026#34;Admin 0 – Countries\u0026#34; from # https://www.naturalearthdata.com/downloads/110m-cultural-vectors/ world_map \u0026lt;- read_sf(\u0026#34;data/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp\u0026#34;) # Download cb_2018_us_state_20m.zip under \u0026#34;States\u0026#34; from # https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html us_states \u0026lt;- read_sf(\u0026#34;data/cb_2018_us_state_20m/cb_2018_us_state_20m.shp\u0026#34;) # Download cb_2018_us_county_5m.zip under \u0026#34;County\u0026#34; from # https://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html us_counties \u0026lt;- read_sf(\u0026#34;data/cb_2018_us_county_5m/cb_2018_us_county_5m.shp\u0026#34;) # Download \u0026#34;Admin 1 – States, Provinces\u0026#34; from # https://www.naturalearthdata.com/downloads/10m-cultural-vectors/ us_states_hires \u0026lt;- read_sf(\u0026#34;data/ne_10m_admin_1_states_provinces/ne_10m_admin_1_states_provinces.shp\u0026#34;) # Download \u0026#34;Rivers + lake centerlines\u0026#34; from # https://www.naturalearthdata.com/downloads/10m-physical-vectors/ rivers_global \u0026lt;- read_sf(\u0026#34;data/ne_10m_rivers_lake_centerlines/ne_10m_rivers_lake_centerlines.shp\u0026#34;) # Download \u0026#34;Rivers + lake …","date":1626048e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626048e3,"objectID":"54feadde64764f2cd9863468cd32f1f7","permalink":"aem2850.toddgerarden.com/example/12-example/","publishdate":"2021-07-12T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/12-example/","section":"example","summary":"Shapefiles Shapefiles are special types of data that include information about geography, such as points (latitude, longitude), paths (a bunch of connected latitudes and longitudes) and areas (a bunch of connected latitudes and longitudes that form a complete shape).","tags":null,"title":"Space","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise, you’ll use whatever data you want to make a plot and add annotations to it. Use a dataset from a past exercise, use one of the built-in datasets like mpg or gapminder from the gapminder package, download stuff from the World Bank using the WDI package, or use something from this list of datasets.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  09-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 09-exercise.Rmd your-project-name.Rproj data\\ WHATEVER.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  09-exercise.zip  The documentation for annotate(), geom_text() and geom_label(), and geom_text_repel() and geom_label_repel() will be incredibly helpful for this exercise. The example for today’s session is also helpful for seeing annotations in real life.\nAgain, you don’t need to make your plots super fancy (except for these annotations), but if you’re feeling brave, experiment with changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Annotations Do the following:\n  Make a plot. Any kind of plot will do (though it might be easiest to work with geom_point()).\n  Label (some or all of) the points using one of geom_text(), geom_label(), geom_text_repel(), or geom_label_repel(). You might need to make a new indicator variable so that you only highlight a few of the points instead of all of them. See this slide for an example, as well as the complete example plot on the example page for today’s session.\n  Add at least two each* the following annotations somewhere on the plot using annotate():\n Text An arrow (look at this page, or search for “arrow” on this page for examples). Make a curved arrow for bonus fun. A rectangle  You can add more if you want, but those three are the minimum. Try to incorporate the annotations into the design of the plot rather than just placing them wherever.\n  Turning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1626048e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1626048e3,"objectID":"d8f241e7b24a2d015b246e0a3616011c","permalink":"aem2850.toddgerarden.com/assignments/09-exercise/","publishdate":"2021-07-12T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/09-exercise/","section":"assignments","summary":"Getting started For this exercise, you’ll use whatever data you want to make a plot and add annotations to it. Use a dataset from a past exercise, use one of the built-in datasets like mpg or gapminder from the gapminder package, download stuff from the World Bank using the WDI package, or use something from this list of datasets.","tags":null,"title":"Annotations","type":"docs"},{"authors":null,"categories":null,"content":"         For this example we’ll use data from the World Bank once again, which we download using the WDI package.\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…”):\n  wdi_parl.csv  Live coding example There is no video for this one, since it really only involves feeding a few ggplot plots fed into ggplotly().\nComplete code Get and clean data First, we load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(WDI) # Get data from the World Bank library(scales) # For nicer label formatting library(plotly) # For easy interactive plots  indicators \u0026lt;- c(\u0026#34;SP.POP.TOTL\u0026#34;, # Population \u0026#34;SG.GEN.PARL.ZS\u0026#34;, # Proportion of seats held by women in national parliaments (%) \u0026#34;NY.GDP.PCAP.KD\u0026#34;) # GDP per capita wdi_parl_raw \u0026lt;- WDI(country = \u0026#34;all\u0026#34;, indicators, extra = TRUE, start = 2000, end = 2019)  Then we clean the data by removing non-country countries and renaming some of the columns.\nwdi_clean \u0026lt;- wdi_parl_raw %\u0026gt;% filter(region != \u0026#34;Aggregates\u0026#34;) %\u0026gt;% select(iso2c, iso3c, country, year, population = SP.POP.TOTL, prop_women_parl = SG.GEN.PARL.ZS, gdp_per_cap = NY.GDP.PCAP.KD, region, income)  Creating a basic interactive chart Let’s make a chart that shows the distribution of the proportion of women in national parliaments in 2019, by continent. We’ll use a strip plot with jittered points.\nFirst we need to make a regular static plot with ggplot:\nwdi_2019 \u0026lt;- wdi_clean %\u0026gt;% filter(year == 2019) %\u0026gt;% drop_na(prop_women_parl) %\u0026gt;% # Scale this down from 0-100 to 0-1 so that scales::percent() can format it as # an actual percent mutate(prop_women_parl = prop_women_parl / 100) static_plot \u0026lt;- ggplot(wdi_2019, aes(y = fct_rev(region), x = prop_women_parl, color = region)) + geom_point(position = position_jitter(width = 0, height = 0.15, seed = 1234)) + guides(color = \u0026#34;none\u0026#34;) + scale_x_continuous(labels = percent) + # I used https://medialab.github.io/iwanthue/ to generate these colors scale_color_manual(values = c(\u0026#34;#425300\u0026#34;, \u0026#34;#e680ff\u0026#34;, \u0026#34;#01bd71\u0026#34;, \u0026#34;#ff3aad\u0026#34;, \u0026#34;#9f3e00\u0026#34;, \u0026#34;#0146bf\u0026#34;, \u0026#34;#671d56\u0026#34;)) + labs(x = \u0026#34;% women in parliament\u0026#34;, y = NULL, caption = \u0026#34;Source: The World Bank\u0026#34;) + theme_bw() static_plot  Great! That looks pretty good.\nTo make it interactive, all we have to do is feed the static_plot object into ggplotly(). That’s it.\nggplotly(static_plot)   {\u0026#34;x\u0026#34;:{\u0026#34;url\u0026#34;:\u0026#34;/example/10-example_files/figure-html//widgets/widget_strip-plot-basic-interactive-real.html\u0026#34;,\u0026#34;options\u0026#34;:{\u0026#34;xdomain\u0026#34;:\u0026#34;*\u0026#34;,\u0026#34;allowfullscreen\u0026#34;:false,\u0026#34;lazyload\u0026#34;:false}},\u0026#34;evals\u0026#34;:[],\u0026#34;jsHooks\u0026#34;:[]} Not everything translates over to JavaScript—the caption is gone now, and the legend is back (which is fine, I guess, since the legend is interactive). But still, this is magic.\nModifying the tooltip Right now, the default tooltip you see when you hover over the points includes the actual proportion of women in parliament for each point, along with the continent, which is neat, but it’d be great if we could see the country name too. The tooltip picks up the information to include from the variables we use in aes(), and we never map the country column to any aesthetic, so it doesn’t show up.\nTo get around this, we can add a new aesthetic for country to the points. Instead of using one of the real ggplot aesthetics like color or fill, we’ll use a fake one called text (we can call it whatever we want! asdf would also work). ggplot has no idea how to do anything with the text aesthetic, and it’ll give you a warning, but that’s okay. The static plot looks the same:\nstatic_plot_toolip \u0026lt;- ggplot(wdi_2019, aes(y = fct_rev(region), x = prop_women_parl, color = region)) + geom_point(aes(text = country), position = position_jitter(width = 0, height = 0.15, seed = 1234)) + guides(color = \u0026#34;none\u0026#34;) + scale_x_continuous(labels = percent) + # I used https://medialab.github.io/iwanthue/ to generate these colors scale_color_manual(values = c(\u0026#34;#425300\u0026#34;, \u0026#34;#e680ff\u0026#34;, \u0026#34;#01bd71\u0026#34;, \u0026#34;#ff3aad\u0026#34;, \u0026#34;#9f3e00\u0026#34;, \u0026#34;#0146bf\u0026#34;, \u0026#34;#671d56\u0026#34;)) + labs(x = \u0026#34;% women in parliament\u0026#34;, y = NULL, caption = \u0026#34;Source: The World Bank\u0026#34;) + theme_bw()  ## Warning: Ignoring unknown aesthetics: text  static_plot_toolip  Now we can tell plotly to use this fake text aesthetic for the tooltip:\nggplotly(static_plot_toolip, tooltip = \u0026#34;text\u0026#34;)   {\u0026#34;x\u0026#34;:{\u0026#34;url\u0026#34;:\u0026#34;/example/10-example_files/figure-html//widgets/widget_strip-plot-text-interactive-real.html\u0026#34;,\u0026#34;options\u0026#34;:{\u0026#34;xdomain\u0026#34;:\u0026#34;*\u0026#34;,\u0026#34;allowfullscreen\u0026#34;:false,\u0026#34;lazyload\u0026#34;:false}},\u0026#34;evals\u0026#34;:[],\u0026#34;jsHooks\u0026#34;:[]} Now we should just see the country names in the tooltips!\nIncluding more information in the tooltip We have country names, but we lost the values in the x-axis. Rwanda has the highest proportion of women in parliament, but what’s the exact number? It’s somewhere above 60%, but that’s all we can see now.\nTo fix this, we can make a new column in the data with all the text we want to include in the tooltip. We’ll use paste0() to combine text and variable values to make the tooltip follow this format:\nName of …","date":1625443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625443200,"objectID":"7d0a53375ef9f0dd0968572178ee71c7","permalink":"aem2850.toddgerarden.com/example/10-example/","publishdate":"2021-07-05T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/10-example/","section":"example","summary":"For this example we’ll use data from the World Bank once again, which we download using the WDI package.\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…”):","tags":null,"title":"Interactivity","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise you’ll use precinct-level data from the 2016 presidential election to visualize relationships between variables. This data comes from the MIT Election Data and Science Lab.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\n  results_2016.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  07-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 07-exercise.Rmd your-project-name.Rproj data\\ results_2016.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  07-exercise.zip  The example for today’s session will be incredibly helpful for this exercise. Reference it.\nAgain, you don’t need to make your plots super fancy, but if you’re feeling brave, experiment with adding a labs() layer or changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Combining plots Make 2–3 plots of anything you want from the results_2016 data (histogram, density, boxplot, scatterplot, whatever) and combine them with patchwork. Look at the documentation to see fancy ways of combining them, like having two rows inside a column.\nTask 3: Visualizing regression Coefficient plot Use the results_2016 data to create a model that predicts the percent of Democratic votes in a precinct based on age, race, income, rent, and state (hint: the formula will look like this: percent_dem ~ median_age + percent_white + per_capita_income + median_rent + state)\nUse tidy() in the broom package and geom_pointrange() to create a coefficient plot for the model estimates. You’ll have 50 rows for all the states, and that’s excessive for a plot like this, so you’ll want to filter out the state rows. You can do that by adding this:\ntidy(...) %\u0026gt;% filter(!str_detect(term, \u0026#34;state\u0026#34;))  The str_detect() function looks for the characters “state” in the term column. The ! negates it. This is thus saying “only keep rows where the word ‘state’ is not in the term name”.\nYou should also get rid of the intercept (filter(term != \u0026#34;(Intercept)\u0026#34;)).\nMarginal effects Create a new data frame with tibble() that contains a column for the average value for each variable in your model except for one, which you vary. For state, you’ll need to choose a single state. The new dataset should look something like this (though this is incomplete! You’ll need to include all the variables in your model, and you’ll need to vary one using seq()) (like seq(9000, 60000, by = 100) for per_capita_income). The na.rm argument in mean() here makes it so missing values are removed—without it, R can’t calculate the mean and will return NA instead.\ndata_to_predict \u0026lt;- tibble(median_age = mean(results_2016$median_age, na.rm = TRUE), percent_white = mean(results_2016$percent_white, na.rm = TRUE), state = \u0026#34;Georgia\u0026#34;) # Or whatever  Use augment() to generate predictions from this dataset using the model you created before. Plot your varied variable on the x-axis, the fitted values (.fitted) on the y-axis, show the relationship with a line, and add a ribbon to show the 95% confidence interval.\nBonus task! Correlograms This is entirely optional but might be fun.\nFor extra fun times, if you feel like it, create a correlogram heatmap, either with geom_tile() or with points sized by the correlation. Use any variables you want from results_2016.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1625443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625443200,"objectID":"744fad2ca69a96c0e8e755eaf46b614c","permalink":"aem2850.toddgerarden.com/assignments/07-exercise/","publishdate":"2021-07-05T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/07-exercise/","section":"assignments","summary":"Getting started For this exercise you’ll use precinct-level data from the 2016 presidential election to visualize relationships between variables. This data comes from the MIT Election Data and Science Lab.","tags":null,"title":"Relationships","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise you’ll use state-level unemployment data from 2006 to 2016 that comes from the US Bureau of Labor Statistics (if you’re curious, I describe how I built this dataset down below).\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\n  unemployment.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  08-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 08-exercise.Rmd your-project-name.Rproj data\\ unemployment.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  08-exercise.zip  The example for today’s session will be incredibly helpful for this exercise. Reference it.\nAgain, you don’t need to make your plots super fancy, but if you’re feeling brave, experiment with adding a labs() layer or changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTask 1: Reflection Write your reflection for the day’s readings.\nTask 2: Small multiples Use data from the US Bureau of Labor Statistics (BLS) to show the trends in employment rate for all 50 states between 2006 and 2016. What stories does this plot tell? Which states struggled to recover from the 2008–09 recession?\nSome hints/tips:\n  You won’t need to filter out any missing rows because the data here is complete—there are no state-year combinations with missing unemployment data.\n  You’ll be plotting 51 facets. You can filter out DC if you want to have a better grid (like 5 × 10), or you can try using facet_geo() from the geofacet package to lay out the plots like a map of the US (try this!).\n  Plot the date column along the x-axis, not the year column. If you plot by year, you’ll get weird looking lines (try it for fun?), since these observations are monthly. If you really want to plot by year only, you’ll need to create a different data frame where you group by year and state and calculate the average unemployment rate for each year/state combination (i.e. group_by(year, state) %\u0026gt;% summarize(avg_unemployment = mean(unemployment)))\n  Try mapping other aesthetics onto the graph too. You’ll notice there are columns for region and division—play with those as colors, for instance.\n  This plot might be big, so make sure you adjust fig.width and fig.height in the chunk options so that it’s visible when you knit it. You might also want to used ggsave() to save it with extra large dimensions.\n  Task 3: Slopegraphs Use data from the BLS to create a slopegraph that compares the unemployment rate in January 2006 with the unemployment rate in January 2009, either for all 50 states at once (good luck with that!) or for a specific region or division. Make sure the plot doesn’t look too busy or crowded in the end.\nWhat story does this plot tell? Which states in the US (or in the specific region you selected) were the most/least affected the Great Recession?\nSome hints/tips:\n  You should use filter() to only select rows where the year is 2006 or 2009 (i.e. filter(year %in% c(2006, 2009)) and to select rows where the month is January (filter(month == 1) or filter(month_name == \u0026#34;January\u0026#34;))\n  In order for the year to be plotted as separate categories on the x-axis, it needs to be a factor, so use mutate(year = factor(year)) to convert it.\n  To make ggplot draw lines between the 2006 and 2009 categories, you need to include group = state in the aesthetics.\n  Bonus task! Bump charts This is entirely optional but might be fun.\nFor extra fun times, if you feel like it, create a bump chart showing something from the unemployment data (perhaps the top 10 states or bottom 10 states in unemployment?) Adapt the code in the example for today’s session.\nIf you do this, plotting 51 lines is going to be a huge mess. But filtering the data is also a bad idea, because states could drop in and out of the top/bottom 10 over time, and we don’t want to get rid of them. Instead, you can zoom in on a specific range of data in your plot with coord_cartesian(ylim = c(1, 10)), for instance.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\nPostscript: how I got this unemployment data For the curious, here’s the code I used to download the unemployment data from …","date":1625443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625443200,"objectID":"83196ea03398a40bc56eff3e0d1a65af","permalink":"aem2850.toddgerarden.com/assignments/08-exercise/","publishdate":"2021-07-05T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/08-exercise/","section":"assignments","summary":"Getting started For this exercise you’ll use state-level unemployment data from 2006 to 2016 that comes from the US Bureau of Labor Statistics (if you’re curious, I describe how I built this dataset down below).","tags":null,"title":"Comparisons","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re again going to use cross-national data from the World Bank’s Open Data portal. We’ll download the data with the WDI package.\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  wdi_co2.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad data First, we load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(WDI) # Get data from the World Bank library(ggrepel) # For non-overlapping labels # You need to install ggtext from GitHub. Follow the instructions at # https://github.com/wilkelab/ggtext library(ggtext) # For fancier text handling  indicators \u0026lt;- c(\u0026#34;SP.POP.TOTL\u0026#34;, # Population \u0026#34;EN.ATM.CO2E.PC\u0026#34;, # CO2 emissions \u0026#34;NY.GDP.PCAP.KD\u0026#34;) # GDP per capita wdi_co2_raw \u0026lt;- WDI(country = \u0026#34;all\u0026#34;, indicators, extra = TRUE, start = 1995, end = 2015)  Then we clean the data by removing non-country countries and renaming some of the columns.\nwdi_clean \u0026lt;- wdi_co2_raw %\u0026gt;% filter(region != \u0026#34;Aggregates\u0026#34;) %\u0026gt;% select(iso2c, iso3c, country, year, population = SP.POP.TOTL, co2_emissions = EN.ATM.CO2E.PC, gdp_per_cap = NY.GDP.PCAP.KD, region, income)  Clean and reshape data Next we’ll do some substantial filtering and reshaping so that we can end up with the rankings of CO~2~ emissions in 1995 and 2014. I annotate as much as possible below so you can see what’s happening in each step.\nco2_rankings \u0026lt;- wdi_clean %\u0026gt;% # Get rid of smaller countries filter(population \u0026gt; 200000) %\u0026gt;% # Only look at two years filter(year %in% c(1995, 2014)) %\u0026gt;% # Get rid of all the rows that have missing values in co2_emissions drop_na(co2_emissions) %\u0026gt;% # Look at each year individually and rank countries based on their emissions that year group_by(year) %\u0026gt;% mutate(ranking = rank(co2_emissions)) %\u0026gt;% ungroup() %\u0026gt;% # Only select a handful of columns, mostly just the newly created \u0026#34;ranking\u0026#34; # column and some country identifiers select(iso3c, country, year, region, income, ranking) %\u0026gt;% # Right now the data is tidy and long, but we want to widen it and create # separate columns for emissions in 1995 and in 2014. pivot_wider() will make # new columns based on the existing \u0026#34;year\u0026#34; column (that\u0026#39;s what `names_from` # does), and it will add \u0026#34;rank_\u0026#34; as the prefix, so that the new columns will # be \u0026#34;rank_1995\u0026#34; and \u0026#34;rank_2014\u0026#34;. The values that go in those new columns will # come from the existing \u0026#34;ranking\u0026#34; column pivot_wider(names_from = year, names_prefix = \u0026#34;rank_\u0026#34;, values_from = ranking) %\u0026gt;% # Find the difference in ranking between 2014 and 1995 mutate(rank_diff = rank_2014 - rank_1995) %\u0026gt;% # Remove all rows where there\u0026#39;s a missing value in the rank_diff column drop_na(rank_diff) %\u0026gt;% # Make an indicator variable that is true of the absolute value of the # difference in rankings is greater than 25. 25 is arbitrary here—that just # felt like a big change in rankings mutate(big_change = ifelse(abs(rank_diff) \u0026gt;= 25, TRUE, FALSE)) %\u0026gt;% # Make another indicator variable that indicates if the rank improved by a # lot, worsened by a lot, or didn\u0026#39;t change much. We use the case_when() # function, which is like a fancy version of ifelse() that takes multiple # conditions. This is how it generally works: # # case_when( # some_test ~ value_if_true, # some_other_test ~ value_if_true, # TRUE ~ value_otherwise #) mutate(better_big_change = case_when( rank_diff \u0026lt;= -25 ~ \u0026#34;Rank improved\u0026#34;, rank_diff \u0026gt;= 25 ~ \u0026#34;Rank worsened\u0026#34;, TRUE ~ \u0026#34;Rank changed a little\u0026#34; ))  Here’s what that reshaped data looked like before:\nhead(wdi_clean)  ## # A tibble: 6 x 9 ## iso2c iso3c country year population co2_emissions gdp_per_cap region income ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 AD AND Andorra 2015 78011 NA 41768. Europe \u0026amp; Central Asia High income ## 2 AD AND Andorra 2004 76244 7.36 47033. Europe \u0026amp; Central Asia High income ## 3 AD AND Andorra 2001 67341 7.79 41421. Europe \u0026amp; Central Asia High income ## 4 AD AND Andorra 2002 70049 7.59 42396. Europe \u0026amp; Central Asia High income ## 5 AD AND Andorra 2014 79213 5.83 40790. Europe \u0026amp; Central Asia High income ## 6 AD AND Andorra 1995 63850 6.66 32918. Europe \u0026amp; Central Asia High income  And here’s what it looks like now:\nhead(co2_rankings)  ## # A tibble: 6 x 9 ## iso3c country region income rank_1995 rank_2014 rank_diff big_change better_big_change ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;lgl\u0026gt; \u0026lt;chr\u0026gt; ## 1 ARE United Arab Emirates Middle East \u0026amp; North Africa High income 167 171 4 FALSE Rank changed a little ## 2 AFG Afghanistan South Asia Low income 8 24 16 FALSE Rank changed a little ## 3 ALB Albania Europe \u0026amp; Central Asia Upper middle income 54 78 24 FALSE Rank changed a little ## 4 ARM Armenia Europe \u0026amp; Central Asia Upper middle income 71 76 5 FALSE Rank changed a little ## 5 AGO Angola Sub-Saharan Africa Lower middle income 59 61 2 FALSE Rank changed a little ## 6 ARG Argentina Latin America \u0026amp; Caribbean High income 103 119 16 FALSE …","date":1625443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625443200,"objectID":"fffbfb191766d0ab951aef7eb2b59fe3","permalink":"aem2850.toddgerarden.com/example/09-example/","publishdate":"2021-07-05T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/09-example/","section":"example","summary":"For this example, we’re again going to use cross-national data from the World Bank’s Open Data portal. We’ll download the data with the WDI package.\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…\"):","tags":null,"title":"Annotations","type":"docs"},{"authors":null,"categories":null,"content":"New York City is full of urban wildlife, and rats are one of the city’s most infamous animal mascots. Rats in NYC are plentiful, but they also deliver food, so they’re useful too.\n  NYC keeps incredibly detailed data regarding animal sightings, including rats, and it makes this data publicly available.\nFor this first mini project, you will use R and ggplot2 to tell an interesting story hidden in the data. You can recreate one of these ugly, less-than-helpful graphs, or create a new story by looking at other variables in the data:\nInstructions Here’s what you need to do:\n  Create a new RStudio project and place it on your computer somewhere. Open that new folder in Windows File Explorer or macOS Finder (however you navigate around the files on your computer), and create two subfolders there named data and output.\n  Download New York City’s database of rat sightings since 2010:\n   Rat_Sightings.csv\n  Place this in the data subfolder you created in step 1. You might need to right click on this link and choose “Save link as…,” since your browser may try to display it as text. The data was originally uploaded by the City of New York to Kaggle, and is provided with a public domain license.\n    Create a new R Markdown file and save it in your project. In RStudio go to File \u0026gt; New File \u0026gt; R Markdown…, choose the default options, and delete all the placeholder text in the new file except for the metadata at the top, which is between --- and ---.\n  Verify that your project folder is structured like this:\nyour-project-name/ your-analysis.Rmd your-project-name.Rproj data/ Rat_Sightings.csv output/ NOTHING    Summarize the data somehow. The raw data has more than 100,000 rows, which means you’ll need to aggregate the data (filter(), group_by(), and summarize() will be your friends). Consider looking at the number of sightings per borough, per year, per dwelling type, etc., or a combination of these, like the change in the number sightings across the 5 boroughs between 2010 and 2016.\n  Create an appropriate visualization based on the data you summarized.\n  Write a memo (no word limit) explaining your process. I’m specifically looking for a discussion of the following:\n What was wrong with the original graphic (if you’re fixing one of the original figures)? What story are you telling with your new graphic? How did you apply the principles of CRAP? How did you apply Kieran Healy’s principles of great visualizations or Alberto Cairo’s five qualities of great visualizations?    Upload the following outputs to iCollege:\n A PDF or Word file of your memo with your final code and graphic embedded in it.1 This means you’ll need to do all your coding in an R Markdown file and embed your code in chunks. A standalone PNG version of your graphic. Use ggsave(plot_name, filename = \u0026#34;output/blah.png\u0026#34;, width = XX, height = XX) A standalone PDF version of your graphic. Use ggsave(plot_name, filename = \u0026#34;output/blah.pdf\u0026#34;, width = XX, height = XX)    You will be graded based on completion using the standard ✓ system, but I’ll provide comments on how you use R and ggplot2, how well you apply the principles of CRAP, The Truthful Art, and Effective Data Visualization, and how appropriate the graph is for the data and the story you’re telling. I will use this rubric to make comments and provide you with a simulated grade.\n  mini-project-1-rubric.pdf  For this assignment, I am less concerned with detailed graphic design principles—select appropriate colors, change fonts if you’re brave, and choose a nice ggplot theme and make some adjustments like moving the legend around (theme(legend.position = \u0026#34;bottom\u0026#34;)).\nThe assignment is due by 11:59 PM on Monday, July 5.\nPlease seek out help when you need it! You know enough R (and have enough examples of code from class and your readings) to be able to do this. Your project has to be turned in individually, and your visualization should be your own (i.e. if you work with others, don’t all turn in the same graph), but you should work with others! Reach out to me for help too—I’m here to help!\nYou can do this, and you’ll feel like a budding dataviz witch/wizard when you’re done.\nStarter code I’ve provided some starter code below. A couple comments about it:\n By default, read_csv() treats cells that are empty or “NA” as missing values. This rat dataset uses “N/A” to mark missing values, so we need to add that as a possible marker of missingness (hence na = c(\u0026#34;\u0026#34;, \u0026#34;NA\u0026#34;, \u0026#34;N/A\u0026#34;)) To make life easier, I’ve renamed some of the key variables you might work with. You can rename others if you want. I’ve also created a few date-related variables (sighting_year, sighting_month, sighting_day, and sighting_weekday). You don’t have to use them, but they’re there if you need them. The functions that create these, like year() and wday() are part of the lubridate library. The date/time variables are formatted like 04/03/2017 12:00:00 AM, which R is not able to automatically parse as a date when reading the CSV file. You can use …","date":1625443200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1625443200,"objectID":"9f4686053d3a49d33c1e6352b4e0106f","permalink":"aem2850.toddgerarden.com/assignments/01-mini-project/","publishdate":"2021-07-05T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/01-mini-project/","section":"assignments","summary":"New York City is full of urban wildlife, and rats are one of the city’s most infamous animal mascots. Rats in NYC are plentiful, but they also deliver food, so they’re useful too.","tags":null,"title":"Mini project 1","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this assignment, you’re going to work with data compiled by data journalist Duncan Greere related to 48 Soviet dogs who flew as test subjects in USSR’s space program in the 1950s and 60s. The original data can be found here.\nYou’ll need to download one CSV file and put them somewhere on your computer or upload them to RStudio.cloud—preferably in a folder named data in your project folder:\n  Dogs-Database.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to clean up the data a little. Download that here and include it in your project:\n  05-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 05-exercise.Rmd your-project-name.Rproj data\\ Dogs-Database.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  05-exercise.zip  Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: The ugliest plot in the world For this assignment, you’re going to forget all the wonderful CRAP design principles you just learned and try your hardest to make the ugliest plot in the world. Modify the color scale and change theme elements to make this plot truly hideous.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex and you followed the instructions here for how to make Cairo fonts work with knitted PDFs) of your document.\nInclude a chunk that uses ggsave() to save the plot to your computer as a PNG file.\nUpload the knitted document and the saved PNG file of your plot to iCollege.\n","date":1624838400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624838400,"objectID":"46e0915d99e2e1e36f8c742487a6ac9c","permalink":"aem2850.toddgerarden.com/assignments/05-exercise/","publishdate":"2021-06-28T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/05-exercise/","section":"assignments","summary":"Getting started For this assignment, you’re going to work with data compiled by data journalist Duncan Greere related to 48 Soviet dogs who flew as test subjects in USSR’s space program in the 1950s and 60s.","tags":null,"title":"Themes","type":"docs"},{"authors":null,"categories":null,"content":"Getting started For this exercise you’ll revisit Hans Rosling’s gapminder data on health and wealth.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nYou don’t need to download any CSV files for this assignment. If you run library(gapminder) you’ll have access to a data frame named gapminder that contains all the data.\nTo help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  06-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 06-exercise.Rmd your-project-name.Rproj  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  06-exercise.zip  Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: Visualizing uncertainty with gapminder Make the following plots and briefly explain what they show:\n  Make a histogram of logged GDP per capita for 1997 only, across all five continents\n  Make a ridge plot of global life expectancy over time, from 1952 to 2007. You’ll need to use the full gapminder data, not the 1997-only data. Each ridge should show the distribution of the world’s life expectancy for each given year (similar to the temperature ridge plot in the example).\nImportant note: year will be on the y-axis, but it must be a categorical variable to work with ggridges, so you’ll either need to wrap it in as.factor() like aes(..., y = as.factor(year)), or add a new categorical/factor year column to the gapminder dataset with mutate().\n  Make a filtered dataset that selects data from only 2007 and removes Oceania. Show the distribution of logged GDP per capita across the four continents using some combination of boxplots and/or violin plots and/or strip plots, either overlaid on top of each other, or using their geom_half_*() counterparts from gghalves.\n  The example for today’s session will be incredibly helpful for this exercise. Reference it.\nYou don’t need to make these super fancy, but if you’re feeling brave, experiment with adding a labs() layer or changing colors or modifying themes and theme elements.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1624838400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624838400,"objectID":"5667c88f6ca1e5ccfd10f37bcfdf40b0","permalink":"aem2850.toddgerarden.com/assignments/06-exercise/","publishdate":"2021-06-28T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/06-exercise/","section":"assignments","summary":"Getting started For this exercise you’ll revisit Hans Rosling’s gapminder data on health and wealth.\nYou should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.","tags":null,"title":"Uncertainty","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re again going to use historical weather data from Dark Sky about wind speed and temperature trends for downtown Atlanta (specifically 33.754557, -84.390009) in 2019. I downloaded this data using Dark Sky’s (about-to-be-retired-because-they-were-bought-by-Apple) API using the darksky package.\nIf you want to follow along with this example, you can download the data below (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  atl-weather-2019.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad and clean data First, we load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(patchwork) # For combining ggplot plots library(GGally) # For scatterplot matrices library(broom) # For converting model objects to data frames  Then we load the data with read_csv(). Here I assume that the CSV file lives in a subfolder in my project named data:\nweather_atl \u0026lt;- read_csv(\u0026#34;data/atl-weather-2019.csv\u0026#34;)  Legal dual y-axes It is fine (and often helpful!) to use two y-axes if the two different scales measure the same thing, like counts and percentages, Fahrenheit and Celsius, pounds and kilograms, inches and centimeters, etc.\nTo do this, you need to add an argument (sec.axis) to scale_y_continuous() to tell it to use a second axis. This sec.axis argument takes a sec_axis() function that tells ggplot how to transform the scale. You need to specify a formula or function that defines how the original axis gets transformed. This formula uses a special syntax. It needs to start with a ~, which indicates that it’s a function, and it needs to use . to stand in for the original value in the original axis.\nSince the equation for converting Fahrenheit to Celsius is this…\n$$ \\text{C} = (32 - \\text{F}) \\times -\\frac{5}{9} $$\n…we can specify this with code like so (where . stands for the Fahrenheit value):\n~ (32 - .) * -5 / 9  Here’s a plot of daily high temperatures in Atlanta throughout 2019, with a second axis:\nggplot(weather_atl, aes(x = time, y = temperatureHigh)) + geom_line() + scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9, name = \u0026#34;Celsius\u0026#34;)) + labs(x = NULL, y = \u0026#34;Fahrenheit\u0026#34;) + theme_minimal()  For fun, we could also convert it to Kelvin, which uses this formula:\n$$ \\text{K} = (\\text{F} - 32) \\times \\frac{5}{9} + 273.15 $$\nggplot(weather_atl, aes(x = time, y = temperatureHigh)) + geom_line() + scale_y_continuous(sec.axis = sec_axis(trans = ~ (. - 32) * 5/9 + 273.15, name = \u0026#34;Kelvin\u0026#34;)) + labs(x = NULL, y = \u0026#34;Fahrenheit\u0026#34;) + theme_minimal()  Combining plots A good alternative to using two y-axes is to use two plots instead. The patchwork package makes this really easy to do with R. There are other similar packages that do this, like cowplot and gridExtra, but I’ve found that patchwork is the easiest to use and it actually aligns the different plot elements like axis lines and legends (yay alignment in CRAP!). The documentation for patchwork is really great and full of examples—you should check it out to see all the things you can do with it!\nTo use patchwork, we need to (1) save our plots as objects and (2) add them together with +.\nFor instance, is there a relationship between temperature and humidity in Atlanta? We can plot both:\n# Temperature in Atlanta temp_plot \u0026lt;- ggplot(weather_atl, aes(x = time, y = temperatureHigh)) + geom_line() + geom_smooth() + scale_y_continuous(sec.axis = sec_axis(trans = ~ (32 - .) * -5/9, name = \u0026#34;Celsius\u0026#34;)) + labs(x = NULL, y = \u0026#34;Fahrenheit\u0026#34;) + theme_minimal() temp_plot  # Humidity in Atlanta humidity_plot \u0026lt;- ggplot(weather_atl, aes(x = time, y = humidity)) + geom_line() + geom_smooth() + labs(x = NULL, y = \u0026#34;Humidity\u0026#34;) + theme_minimal() humidity_plot  Right now, these are two separate plots, but we can combine them with + if we load patchwork:\nlibrary(patchwork) temp_plot + humidity_plot  By default, patchwork will put these side-by-side, but we can change that with the plot_layout() function:\ntemp_plot + humidity_plot + plot_layout(ncol = 1)  We can also play with other arguments in plot_layout(). If we want to make the temperature plot taller and shrink the humidity section, we can specify the proportions for the plot heights. Here, the temperature plot is 70% of the height and the humidity plot is 30%:\ntemp_plot + humidity_plot + plot_layout(ncol = 1, heights = c(0.7, 0.3))  Scatterplot matrices We can visualize the correlations between pairs of variables with the ggpairs() function in the GGally package. For instance, how correlated are high and low temperatures, humidity, wind speed, and the chance of precipitation? We first make a smaller dataset with just those columns, and then we feed that dataset into ggpairs() to see all the correlation information:\nlibrary(GGally) weather_correlations \u0026lt;- weather_atl %\u0026gt;% select(temperatureHigh, temperatureLow, humidity, windSpeed, precipProbability) ggpairs(weather_correlations)  It looks like high and low …","date":1624838400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624838400,"objectID":"456d2e61a1c3227a0d74dc546242f41f","permalink":"aem2850.toddgerarden.com/example/07-example/","publishdate":"2021-06-28T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/07-example/","section":"example","summary":"For this example, we’re again going to use historical weather data from Dark Sky about wind speed and temperature trends for downtown Atlanta (specifically 33.754557, -84.390009) in 2019. I downloaded this data using Dark Sky’s (about-to-be-retired-because-they-were-bought-by-Apple) API using the darksky package.","tags":null,"title":"Relationships","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re going to use cross-national data, but instead of using the typical gapminder dataset, we’re going to collect data directly from the World Bank’s Open Data portal\nIf you want to skip the data downloading, you can download the data below (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  wdi_raw.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad and clean data First, we load the libraries we’ll be using:\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(WDI) # For getting data from the World Bank library(geofacet) # For map-shaped facets library(scales) # For helpful scale functions like dollar() library(ggrepel) # For non-overlapping labels  The World Bank has a ton of country-level data at data.worldbank.org. We can use a package named WDI (world development indicators) to access their servers and download the data directly into R.\nTo do this, we need to find the special World Bank codes for specific variables we want to get. These codes come from the URLs of the World Bank’s website. For instance, if you search for “access to electricity” at the World Bank’s website, you’ll find this page. If you look at the end of the URL, you’ll see a cryptic code: EG.ELC.ACCS.ZS. That’s the World Bank’s ID code for the “Access to electricity (% of population)” indicator.\nWe can feed a list of ID codes to the WDI() function to download data for those specific indicators. We want data from 1995-2015, so we set the start and end years accordingly. The extra=TRUE argument means that it’ll also include other helpful details like region, aid status, etc. Without it, it would only download the indicators we listed.\nindicators \u0026lt;- c(\u0026#34;SP.DYN.LE00.IN\u0026#34;, # Life expectancy \u0026#34;EG.ELC.ACCS.ZS\u0026#34;, # Access to electricity \u0026#34;EN.ATM.CO2E.PC\u0026#34;, # CO2 emissions \u0026#34;NY.GDP.PCAP.KD\u0026#34;) # GDP per capita wdi_raw \u0026lt;- WDI(country = \u0026#34;all\u0026#34;, indicators, extra = TRUE, start = 1995, end = 2015) head(wdi_raw)  Downloading data from the World Bank every time you knit will get tedious and take a long time (plus if their servers are temporarily down, you won’t be able to get the data). It’s good practice to save this raw data as a CSV file and then work with that.\nwrite_csv(wdi_raw, \u0026#34;data/wdi_raw.csv\u0026#34;)  Since we care about reproducibility, we still want to include the code we used to get data from the World Bank, we just don’t want it to actually run. You can include chunks but not run them by setting eval=FALSE in the chunk options. In this little example, we show the code for downloading the data, but we don’t evaluate the chunk. We then include a chunk that loads the data from a CSV file with read_csv(), but we don’t include it (include=FALSE). That way, in the knitted file we see the WDI() code, but in reality it’s loading the data from CSV. Super tricky.\nI first download data from the World Bank: ```{r get-wdi-data, eval=FALSE} wdi_raw \u0026lt;- WDI(...) write_csv(wdi_raw, \u0026#34;data/wdi_raw.csv\u0026#34;) ``` ```{r load-wdi-data-real, include=FALSE} wdi_raw \u0026lt;- read_csv(\u0026#34;data/wdi_raw.csv\u0026#34;) ```  Then we clean up the data a little, filtering out rows that aren’t actually countries and renaming the ugly World Bank code columns to actual words:\nwdi_clean \u0026lt;- wdi_raw %\u0026gt;% filter(region != \u0026#34;Aggregates\u0026#34;) %\u0026gt;% select(iso2c, country, year, life_expectancy = SP.DYN.LE00.IN, access_to_electricity = EG.ELC.ACCS.ZS, co2_emissions = EN.ATM.CO2E.PC, gdp_per_cap = NY.GDP.PCAP.KD, region, income) head(wdi_clean)  ## # A tibble: 6 x 9 ## iso2c country year life_expectancy access_to_electricity co2_emissions gdp_per_cap region income ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 AD Andorra 2015 NA 100 NA 41768. Europe \u0026amp; Central Asia High income ## 2 AD Andorra 2004 NA 100 7.36 47033. Europe \u0026amp; Central Asia High income ## 3 AD Andorra 2001 NA 100 7.79 41421. Europe \u0026amp; Central Asia High income ## 4 AD Andorra 2002 NA 100 7.59 42396. Europe \u0026amp; Central Asia High income ## 5 AD Andorra 2014 NA 100 5.83 40790. Europe \u0026amp; Central Asia High income ## 6 AD Andorra 1995 NA 100 6.66 32918. Europe \u0026amp; Central Asia High income  Small multiples First we can make some small multiples plots and show life expectancy over time for a handful of countries. We’ll make a list of some countries chosen at random while I scrolled through the data, and then filter our data to include only those rows. We then plot life expectancy, faceting by country.\nlife_expectancy_small \u0026lt;- wdi_clean %\u0026gt;% filter(country %in% c(\u0026#34;Argentina\u0026#34;, \u0026#34;Bolivia\u0026#34;, \u0026#34;Brazil\u0026#34;, \u0026#34;Belize\u0026#34;, \u0026#34;Canada\u0026#34;, \u0026#34;Chile\u0026#34;)) ggplot(data = life_expectancy_small, mapping = aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_wrap(vars(country))  Small multiples! That’s all we need to do.\nWe can do some fancier things, though. We can make this plot hyper minimalist:\nggplot(data = life_expectancy_small, mapping = aes(x = year, y = life_expectancy)) + geom_line(size = 1) + facet_wrap(vars(country), scales = \u0026#34;free_y\u0026#34;) + theme_void() + theme(strip.text = …","date":1624838400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624838400,"objectID":"1fa7cdd10a36c81c6785aebcface1df7","permalink":"aem2850.toddgerarden.com/example/08-example/","publishdate":"2021-06-28T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/08-example/","section":"example","summary":"For this example, we’re going to use cross-national data, but instead of using the typical gapminder dataset, we’re going to collect data directly from the World Bank’s Open Data portal","tags":null,"title":"Comparisons","type":"docs"},{"authors":null,"categories":null,"content":"Getting started You’ll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nYou’ll need to download three CSV files and put them somewhere on your computer or upload them to RStudio.cloud—preferably in a folder named data in your project folder:\n  The_Fellowship_Of_The_Ring.csv  The_Two_Towers.csv  The_Return_Of_The_King.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise. Download that here and include it in your project:\n  03-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 03-exercise.Rmd your-project-name.Rproj data\\ The_Fellowship_Of_The_Ring.csv The_Two_Towers.csv The_Return_Of_The_King.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  03-exercise.zip  Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: Lord of the Rings Answer the following questions:\n  Use group_by() and summarize() on the lotr data to find the total number of words spoken by race. Don’t worry about plotting it. How many words did male hobbits say in the movies?\n  Use group_by() and summarize() to answer these questions with bar plots (geom_col())\n  Does a certain race dominate the entire trilogy? (hint: group by Race)\n  Does a certain gender dominate a movie? (lolz of course it does, but still, graph it) (Hint: group by both Gender and Film.) Experiment with filling by Gender or Film and faceting by Gender or Film.\n  Does the dominant race differ across the three movies? (Hint: group by both Race and Film.) Experiment with filling by Race or Film and faceting by Race or Film.\n    Create a plot that visualizes the number of words spoken by race, gender, and film simultaneously. Use the complete tidy lotr data frame. You don’t need to create a new summarized dataset (with group_by(Race, Gender, Film)) because the original data already has a row for each of those (you could make a summarized dataset, but it would be identical to the full version).\nYou need to show Race, Gender, and Film at the same time, but you only have two possible aesthetics (x and fill), so you’ll also need to facet by the third. Play around with different combinations (e.g. try x = Race, then x = Film) until you find one that tells the clearest story. For fun, add a labs() layer to add a title and subtitle and caption.\n  You’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1624233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624233600,"objectID":"521db0862f69ce2d7c37f2def40a74a3","permalink":"aem2850.toddgerarden.com/assignments/03-exercise/","publishdate":"2021-06-21T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/03-exercise/","section":"assignments","summary":"Getting started You’ll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.","tags":null,"title":"Mapping data to graphics","type":"docs"},{"authors":null,"categories":null,"content":"Getting started The New York City Department of Buildings (DOB) maintains a list of construction sites that have been categorized as “essential” during the city’s shelter-in-place pandemic order. They’ve provided an interactive map here where you can see the different projects. There’s also a link there to download the complete dataset.\nFor this exercise, you’re going to use this data to visualize the amounts or proportions of different types of essential projects in the five boroughs of New York City (Brooklyn, Manhattan, the Bronx, Queens, and Staten Island).\nYou’ll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nYou’ll need to download one CSV file and put it somewhere on your computer or upload it to RStudio.cloud—preferably in a folder named data in your project folder. You can download the data from the DOB’s map, or use this link to get it directly:\n  EssentialConstruction.csv  To help you, I’ve created a skeleton R Markdown file with a template for this exercise, along with some code to help you clean and summarize the data. Download that here and include it in your project:\n  04-exercise.Rmd  In the end, the structure of your project directory should look something like this:\nyour-project-name\\ 04-exercise.Rmd your-project-name.Rproj data\\ EssentialConstruction.csv  To check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n  04-exercise.zip  Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: Essential pandemic construction Make the following plots and briefly explain what they show:\n  Show the count or proportion of approved projects by borough using a bar chart\n  Show the count or proportion of approved projects by category using a lollipop chart\n  Show the proportion of approved projects by borough and category simultaneously using a heatmap\n  The example for today’s session will be incredibly helpful for this exercise. Reference it.\nYou don’t need to make these super fancy, but if you’re feeling brave, experiment with adding a labs() layer or changing fill colors with scale_fill_manual() or with viridis palettes.\nYou’ll need to insert your own code chunks where needed. Rather than typing them by hand (that’s tedious and you might miscount the number of backticks!), use the “Insert” button at the top of the editing window, or type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS.\nTurning everything in When you’re all done, click on the “Knit” button at the top of the editing window and create an HTML or Word version (or PDF if you’ve installed tinytex) of your document. Upload that file to iCollege.\n","date":1624233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624233600,"objectID":"871d7dd69535d4eacb17eff2c76c1c7e","permalink":"aem2850.toddgerarden.com/assignments/04-exercise/","publishdate":"2021-06-21T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/04-exercise/","section":"assignments","summary":"Getting started The New York City Department of Buildings (DOB) maintains a list of construction sites that have been categorized as “essential” during the city’s shelter-in-place pandemic order. They’ve provided an interactive map here where you can see the different projects.","tags":null,"title":"Amounts and proportions","type":"docs"},{"authors":null,"categories":null,"content":"The lesson for today’s session is a fairly comprehensive introduction to using the theme() function in ggplot, and this page by Henry Wang is a good cheat sheet for remembering which theme elements are which on a plot.\nFor your exercise, you’re going to create the world’s ugliest plot. For this example, we’ll use the principles of CRAP to make a great theme.\nI’m going to build the theme semi-incrementally here. Instead of showing how the plot updates with each change in setting, I do most of the updates all at once, with tons of comments explaining what each line does. Importantly, I did not write this all at once. When you’re tinkering with themes, you generally start with something like theme_minimal() or theme_bw() and then gradually add new things to theme(), like modifying plot.title, then plot.subtitle, etc. It’s a very iterative process with lots of tinkering. Because of this, there is no live-coding video for this example—it would be incredibly long and boring. Instead, look through each of the lines and see what they’re doing.\nFor this example, I’m going to use the gapminder dataset that we’ve been using throughout this week. You can get it if you install the gapminder package in R, or you can download this CSV file (you may need to right click on it and select “Save As…\u0026#34;):\n  gapminder.csv  I’m also going to use the Roboto Condensed font in the theme. Download and install it on your computer if you don’t have it.\nBasic plot When I’m creating a theme, I like to use a basic plot with everything that might show up, complete with a title, subtitle, caption, legend, facets, and other elements.\nlibrary(tidyverse) # For ggplot, dplyr, and friends library(gapminder) # For gapminder data library(scales) # For nice axis labels gapminder_filtered \u0026lt;- gapminder %\u0026gt;% filter(year \u0026gt; 2000) base_plot \u0026lt;- ggplot(data = gapminder_filtered, mapping = aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) + geom_point() + # Use dollars, and get rid of the cents part (i.e. $300 instead of $300.00) scale_x_log10(labels = dollar_format(accuracy = 1)) + # Format with commas scale_size_continuous(labels = comma) + # Use viridis scale_color_viridis_d(option = \u0026#34;plasma\u0026#34;, end = 0.9) + labs(x = \u0026#34;GDP per capita\u0026#34;, y = \u0026#34;Life expectancy\u0026#34;, color = \u0026#34;Continent\u0026#34;, size = \u0026#34;Population\u0026#34;, title = \u0026#34;Here\u0026#39;s a cool title\u0026#34;, subtitle = \u0026#34;And here\u0026#39;s a neat subtitle\u0026#34;, caption = \u0026#34;Source: The Gapminder Project\u0026#34;) + facet_wrap(vars(year)) base_plot  Now we have base_plot to work with. Here’s what it looks like with theme_minimal() applied to it:\nbase_plot + theme_minimal()  That gets rid of the grey background and is a good start, but we can make lots of improvements. First let’s deal with the gridlines. There are too many. We can get rid of the minor gridlines with by setting them to element_blank():\nbase_plot + theme_minimal() + theme(panel.grid.minor = element_blank())  Next let’s add some typographic contrast. We’ll use Roboto Condensed Regular as the base font. Before trying this, make sure you do the following:\nOn macOS:\n Run capabilities() in your console and verify that TRUE shows up under cairo If not, download and install XQuartz  On Windows:\n  Run windowsFonts() in your console and you’ll see a list of all the fonts you can use with R. It’s not a very big list.\n#\u0026gt; $serif #\u0026gt; [1] \u0026#34;TT Times New Roman\u0026#34; #\u0026gt; #\u0026gt; $sans #\u0026gt; [1] \u0026#34;TT Arial\u0026#34; #\u0026gt; #\u0026gt; $mono #\u0026gt; [1] \u0026#34;TT Courier New\u0026#34;  You can add Roboto Condensed to your current R session by running this in your console:\nwindowsFonts(`Roboto Condensed` = windowsFont(\u0026#34;Roboto Condensed\u0026#34;))  Now if you run windowsFonts(), you’ll see it in the list:\n#\u0026gt; $serif #\u0026gt; [1] \u0026#34;TT Times New Roman\u0026#34; #\u0026gt; #\u0026gt; $sans #\u0026gt; [1] \u0026#34;TT Arial\u0026#34; #\u0026gt; #\u0026gt; $mono #\u0026gt; [1] \u0026#34;TT Courier New\u0026#34; #\u0026gt; #\u0026gt; $`Roboto Condensed` #\u0026gt; [1] \u0026#34;Roboto Condensed\u0026#34;  This only takes effect for your current R session, so if you are knitting a document or if you ever plan on closing RStudio, you’ll need to incorporate this font creation code into your script.\n  We’ll use the font as the base_family argument. Note how I make it bold with face and change the size with rel(). Instead of manually setting some arbitrary size, I use rel() to resize the text in relation to the base_size argument. Using rel(1.7) means 1.7 × base_size, or 20.4 That will rescale according to whatever base_size is—if I shrink it to base_size = 8, the title will scale down accordingly.\nplot_with_good_typography \u0026lt;- base_plot + theme_minimal(base_family = \u0026#34;Roboto Condensed\u0026#34;, base_size = 12) + theme(panel.grid.minor = element_blank(), # Bold, bigger title plot.title = element_text(face = \u0026#34;bold\u0026#34;, size = rel(1.7)), # Plain, slightly bigger subtitle that is grey plot.subtitle = element_text(face = \u0026#34;plain\u0026#34;, size = rel(1.3), color = \u0026#34;grey70\u0026#34;), # Italic, smaller, grey caption that is left-aligned plot.caption = element_text(face = \u0026#34;italic\u0026#34;, size = rel(0.7), color = \u0026#34;grey70\u0026#34;, hjust = 0), # Bold legend titles legend.title = element_text(face = \u0026#34;bold\u0026#34;), # Bold, slightly larger facet titles that are left-aligned for the …","date":1624233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624233600,"objectID":"fe763c4d7b1e028e13d4959e92b7bf2f","permalink":"aem2850.toddgerarden.com/example/05-example/","publishdate":"2021-06-21T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/05-example/","section":"example","summary":"The lesson for today’s session is a fairly comprehensive introduction to using the theme() function in ggplot, and this page by Henry Wang is a good cheat sheet for remembering which theme elements are which on a plot.","tags":null,"title":"Themes","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re going to use historical weather data from Dark Sky about wind speed and temperature trends for downtown Atlanta (specifically 33.754557, -84.390009) in 2019. I downloaded this data using Dark Sky’s (about-to-be-retired-because-they-were-bought-by-Apple) API using the darksky package.\nIf you want to follow along with this example, you can download the data below (you’ll likely need to right click and choose “Save Link As…\u0026#34;):\n  atl-weather-2019.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad and clean data First, we load the libraries we’ll be using:\nlibrary(tidyverse) library(lubridate) library(ggridges) library(gghalves)  Then we load the data with read_csv(). Here I assume that the CSV file lives in a subfolder in my project named data:\nweather_atl_raw \u0026lt;- read_csv(\u0026#34;data/atl-weather-2019.csv\u0026#34;)  We’ll add a couple columns that we can use for faceting and filling using the month() and wday() functions from lubridate for extracting parts of the date:\nweather_atl \u0026lt;- weather_atl_raw %\u0026gt;% mutate(Month = month(time, label = TRUE, abbr = FALSE), Day = wday(time, label = TRUE, abbr = FALSE))  Now we’re ready to go!\nHistograms We can first make a histogram of wind speed. We’ll use a bin width of 1 and color the edges of the bars white:\nggplot(weather_atl, aes(x = windSpeed)) + geom_histogram(binwidth = 1, color = \u0026#34;white\u0026#34;)  This is fine enough, but we can improve it by forcing the buckets/bins to start at whole numbers instead of containing ranges like 2.5–3.5. We’ll use the boundary argument for that. We also add scale_x_continuous() to add our own x-axis breaks instead of having things like 2.5, 5, and 7.5:\nggplot(weather_atl, aes(x = windSpeed)) + geom_histogram(binwidth = 1, color = \u0026#34;white\u0026#34;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1))  We can show the distribution of wind speed by month if we map the Month column we made onto the fill aesthetic:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_histogram(binwidth = 1, color = \u0026#34;white\u0026#34;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1))  This is colorful, but it’s impossible to actually interpret. Instead of only filling, we’ll also facet by month to see separate graphs for each month. We can turn off the fill legend because it’s now redundant.\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_histogram(binwidth = 1, color = \u0026#34;white\u0026#34;, boundary = 1) + scale_x_continuous(breaks = seq(0, 12, by = 1)) + guides(fill = \u0026#34;none\u0026#34;) + facet_wrap(vars(Month))  Neat! January, March, and April appear to have the most variation in windy days, with a few wind-less days and a few very-windy days, while August was very wind-less.\nDensity plots The code to create a density plot is nearly identical to what we used for the histogram—the only thing we change is the geom layer:\nggplot(weather_atl, aes(x = windSpeed)) + geom_density(color = \u0026#34;grey20\u0026#34;, fill = \u0026#34;grey50\u0026#34;)  If we want, we can mess with some of the calculus options like the kernel and bandwidth:\nggplot(weather_atl, aes(x = windSpeed)) + geom_density(color = \u0026#34;grey20\u0026#34;, fill = \u0026#34;grey50\u0026#34;, bw = 0.1, kernel = \u0026#34;epanechnikov\u0026#34;)  We can also fill by month. We’ll make the different layers 50% transparent so we can kind of see through the whole stack:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_density(alpha = 0.5)  Even with the transparency, this is really hard to interpret. We can fix this by faceting, like we did with the histograms:\nggplot(weather_atl, aes(x = windSpeed, fill = Month)) + geom_density(alpha = 0.5) + guides(fill = \u0026#34;none\u0026#34;) + facet_wrap(vars(Month))  Or we can stack the density plots behind each other with ggridges. For that to work, we also need to map Month to the y-axis. We can reverse the y-axis so that January is at the top if we use the fct_rev() function:\nggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) + geom_density_ridges() + guides(fill = \u0026#34;none\u0026#34;)  We can add some extra information to geom_density_ridges() with some other arguments like quantile_lines. We can use the quantiles argument to tell the plow how many parts to be cut into. Since we just want to show the median, we’ll set that to 2 so each density plot is divided in half:\nggplot(weather_atl, aes(x = windSpeed, y = fct_rev(Month), fill = Month)) + geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + guides(fill = \u0026#34;none\u0026#34;)  Now that we have good working code, we can easily substitute in other variables by changing the x mapping:\nggplot(weather_atl, aes(x = temperatureHigh, y = fct_rev(Month), fill = Month)) + geom_density_ridges(quantile_lines = TRUE, quantiles = 2) + guides(fill = \u0026#34;none\u0026#34;)  We can get extra fancy if we fill by temperature instead of filling by month. To get this to work, we need to use geom_density_ridges_gradient(), and we need to change the fill mapping to the strange looking ..x.., which is a weird ggplot trick that tells it to use the variable we …","date":1624233600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1624233600,"objectID":"0a6f24b2b37d15174d8d1c1d03abba97","permalink":"aem2850.toddgerarden.com/example/06-example/","publishdate":"2021-06-21T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/06-example/","section":"example","summary":"For this example, we’re going to use historical weather data from Dark Sky about wind speed and temperature trends for downtown Atlanta (specifically 33.754557, -84.390009) in 2019. I downloaded this data using Dark Sky’s (about-to-be-retired-because-they-were-bought-by-Apple) API using the darksky package.","tags":null,"title":"Uncertainty","type":"docs"},{"authors":null,"categories":null,"content":"Task 1: Make an RStudio Project   Use either RStudio.cloud or RStudio on your computer (preferably RStudio on your computer! Follow these instructions to get started!) to create a new RStudio Project.\n  Create a folder named “data” in the project folder you just made.\n  Download this CSV file and place it in that folder:\n  cars.csv    In RStudio, go to “File” \u0026gt; “New File…” \u0026gt; “R Markdown…” and click “OK” in the dialog without changing anything.\n  Delete all the placeholder text in that new file and replace it with this:\n--- title: \u0026#34;Exercise 1\u0026#34; author: \u0026#34;Put your name here\u0026#34; output: html_document --- # Reflection Replace this text with your reflection # My first plot ```{r load-libraries-data, warning=FALSE, message=FALSE} library(tidyverse) cars \u0026lt;- read_csv(\u0026#34;data/cars.csv\u0026#34;) ``` Replace this line with a code chunk and use it to create a plot.    Save the R Markdown file with some sort of name (without any spaces!)\n  Your project folder should look something like this:\n  Task 2: Make an R Markdown file with a plot in it   Add your reading reflection to the appropriate place in the R Markdown file. You can type directly in RStudio if you want (though there’s no spell checker), or you can type it in Word or Google Docs and then paste it into RStudio.\n  Remove the text that says “Replace this line with a code chunk” and insert a new R code chunk. Either type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS, or use the “Insert Chunk” menu:\n  Use ggplot() to create a scatterplot using the mpg dataset. Use whatever variables you want. Type the code to create the plot in the new empty chunk.\n  Knit your document as a Word file (or PDF if you’re brave and installed LaTeX). Use the “Knit” menu:\n  Upload the knitted document to iCollege.\n  🎉 Party! 🎉\n   You’ll be doing this same process for all your future exercises. Each exercise will involve an R Markdown file. You can either create a new RStudio Project directory for all your work:\nOr you can create individual projects for each assignment and mini-project:\n","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"980afd1bc19d59ce5fef4a50b47862bd","permalink":"aem2850.toddgerarden.com/assignments/01-exercise/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/01-exercise/","section":"assignments","summary":"Task 1: Make an RStudio Project   Use either RStudio.cloud or RStudio on your computer (preferably RStudio on your computer! Follow these instructions to get started!) to create a new RStudio Project.","tags":null,"title":"Introduction to R and the tidyverse","type":"docs"},{"authors":null,"categories":null,"content":"Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: CRAP critique Critique the design of the poster for the BYU Student Wellness Center workshop below. Go through the CRAP checklist and analyze how well or poorly the poster follows each of the principles. Discuss how the poster’s adherence to (or non-adherence to) these principles influences its effectiveness.\n(This would have been some random poster from GSU, but I haven’t been on campus since mid-March 2020 😭)\nTask 3: CRAP redesign Redesign the poster for the BYU Student Wellness Center workshop. Use whatever program you want—even PowerPoint if you’re most comfortable with that, though it’ll probably be easier to use something like Canva or Adobe Illustrator. If you use Canva, don’t use any of the built-in templates—start from scratch with a blank page.\nTo save you from retyping everything, I’ve included all the text and Student Wellness hex logo in the zip file below:\n  02-exercise.zip  I didn’t include the Instagram logo. If you want to use that, go find one online. You don’t have to use it. You don’t have to use the big paragraph of text either—you can rewrite it to shrink it down if you want.\nCritique your new design using the CRAP checklist. How did you use contrast, repetition, alignment, and proximity in your improved design?\nTurning everything in You don’t need to worry about using R Markdown for this assignment (unless you really want to). On iCollege, submit a PDF of your new poster, along with a PDF of your reflection and your critiques of the original poster and your new poster.\n","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"cecfbadbe01d72a6f28421f66a8e17be","permalink":"aem2850.toddgerarden.com/assignments/02-exercise/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/assignments/02-exercise/","section":"assignments","summary":"Task 1: Reflection Write your reflection for the day’s readings.\nTask 2: CRAP critique Critique the design of the poster for the BYU Student Wellness Center workshop below. Go through the CRAP checklist and analyze how well or poorly the poster follows each of the principles.","tags":null,"title":"Graphic design","type":"docs"},{"authors":null,"categories":null,"content":"For this example, I’m going to use real world data to demonstrate the typical process for loading data, cleaning it up a bit, and mapping specific columns of the data onto the parts of a graph using the grammar of graphics and ggplot().\nThe data I’ll use comes from the BBC’s corporate charity, BBC Children in Need, which makes grants to smaller UK nonprofit organizations that work on issues related to childhood poverty. An organization in the UK named 360Giving helps nonprofits and foundations publish data about their grant giving activities in an open and standardized way, and (as of May 2020) they list data from 126 different charities, including BBC Children in Need.\nIf you want to follow along with this example (highly recommended!), you can download the data directly from 360Giving or by using this link:\n  360-giving-data.xlsx  Live coding example Warning: I got carried away with this because I wanted to make it as comprehensive and detailed as possible, so it starts off with nothing and walks through the process of downloading data, creating a new project, and getting everything started. As such, it is ridiculously long (1 hour 😱 😱). Remember that there’s no requirement that you watch these things—they’re simply for your reference so you can see what doing this R stuff looks like in real time. The content all below the video is roughly the same (more polished even).\nThat said, it is a useful demonstration of how to get everything started and what it looks like to do an entire analysis, so there is value in it. Watch just the first part, or watch it on 2x or something.\nAnd I promise future examples will not be this long!\n  Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad and clean data First, we need to load a few libraries: tidyverse (as always), along with readxl for reading Excel files and lubridate for working with dates:\n# Load libraries library(tidyverse) # For ggplot, dplyr, and friends library(readxl) # For reading Excel files library(lubridate) # For working with dates  We’ll then load the original Excel file. I placed this file in a folder named data in my RStudio Project folder for this example. I like to read original data into an object named whatever_raw just in case it takes a long time to load (that way I don’t have to keep reloading it every time I add a new column or do anything else with it). It’s also good practice to keep a pristine, untouched copy of your data.\n# Load the original Excel file bbc_raw \u0026lt;- read_excel(\u0026#34;data/360-giving-data.xlsx\u0026#34;)  There may be some errors reading the file—you can ignore those in this case.\nNext we’ll add a couple columns and clean up the data a little. In the video I did this non-linearly—I came back to the top of the document to add columns when I needed them and then reran the chunk to create the data.\nWe’ll extract the year from the Award Date column, rename some of the longer-named columns, and make a new column that shows the duration of grants. We’ll also get rid of 2015 since there are so few observations then.\nNote the strange use of `s around column names like `Award Date`. This is because R technically doesn’t allow special characters like spaces in column names. If there are spaces, you have to wrap the column names in backticks. Because typing backticks all the time gets tedious, we’ll use rename() to rename some of the columns:\nbbc \u0026lt;- bbc_raw %\u0026gt;% # Extract the year from the award date mutate(grant_year = year(`Award Date`)) %\u0026gt;% # Rename some columns rename(grant_amount = `Amount Awarded`, grant_program = `Grant Programme:Title`, grant_duration = `Planned Dates:Duration (months)`) %\u0026gt;% # Make a new text-based version of the duration column, recoding months # between 12-23, 23-35, and 36+. The case_when() function here lets us use # multiple if/else conditions at the same time. mutate(grant_duration_text = case_when( grant_duration \u0026gt;= 12 \u0026amp; grant_duration \u0026lt; 24 ~ \u0026#34;1 year\u0026#34;, grant_duration \u0026gt;= 24 \u0026amp; grant_duration \u0026lt; 36 ~ \u0026#34;2 years\u0026#34;, grant_duration \u0026gt;= 36 ~ \u0026#34;3 years\u0026#34; )) %\u0026gt;% # Get rid of anything before 2016 filter(grant_year \u0026gt; 2015) %\u0026gt;% # Make a categorical version of the year column mutate(grant_year_category = factor(grant_year))  Histograms First let’s look at the distribution of grant amounts with a histogram. Map grant_amount to the x-axis and don’t map anything to the y-axis, since geom_histogram() will calculate the y-axis values for us:\nggplot(data = bbc, mapping = aes(x = grant_amount)) + geom_histogram()  ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.  Notice that ggplot warns you about bin widths. By default it will divide the data into 30 equally spaced bins, which will most likely not be the best for your data. You should always set your own bin width to something more appropriate. There are no rules for correct bin widths. Just don’t have them be too wide:\nggplot(data = bbc, mapping = aes(x = grant_amount)) + geom_histogram(binwidth = 100000)  Or too small:\nggplot(data = bbc, …","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"f32819d9b39039a397d58dd37d2f3efa","permalink":"aem2850.toddgerarden.com/example/03-example/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/03-example/","section":"example","summary":"For this example, I’m going to use real world data to demonstrate the typical process for loading data, cleaning it up a bit, and mapping specific columns of the data onto the parts of a graph using the grammar of graphics and ggplot().","tags":null,"title":"Mapping data to graphics","type":"docs"},{"authors":null,"categories":null,"content":"For this example, we’re going to use real world data to demonstrate some different ways to visualize amounts and proportions. We’ll use data from the CDC and the Social Security Administration about the number of daily births in the United States from 1994–2014. FiveThirtyEight reported a story using this data in 2016 and they posted relatively CSV files on GitHub, so we can download and use those.\nIf you want to follow along with this example, you can download the data directly from GitHub or by using these links (you’ll likely need to right click on these and choose “Save Link As…\u0026#34;):\n  US_births_1994-2003_CDC_NCHS.csv  US_births_2000-2014_SSA.csv  Live coding example   Complete code (This is a slightly cleaned up version of the code from the video.)\nLoad data There are two CSV files:\n US_births_1994-2003_CDC_NCHS.csv contains U.S. births data for the years 1994 to 2003, as provided by the Centers for Disease Control and Prevention’s National Center for Health Statistics. US_births_2000-2014_SSA.csv contains U.S. births data for the years 2000 to 2014, as provided by the Social Security Administration.  Since the two datasets overlap in 2000–2003, we use Social Security Administration data for those years.\nWe downloaded the data from GitHub and placed the CSV files in a folder named data. We’ll then load them with read_csv() and combine them into one data frame.\nlibrary(tidyverse) library(scales) # For nice labels in charts births_1994_1999 \u0026lt;- read_csv(\u0026#34;data/US_births_1994-2003_CDC_NCHS.csv\u0026#34;) %\u0026gt;% # Ignore anything after 2000 filter(year \u0026lt; 2000) births_2000_2014 \u0026lt;- read_csv(\u0026#34;data/US_births_2000-2014_SSA.csv\u0026#34;) births_combined \u0026lt;- bind_rows(births_1994_1999, births_2000_2014)  Wrangle data Let’s look at the first few rows of the data to see what we’re working with:\nhead(births_combined)  ## # A tibble: 6 x 5 ## year month date_of_month day_of_week births ## \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; ## 1 1994 1 1 6 8096 ## 2 1994 1 2 7 7772 ## 3 1994 1 3 1 10142 ## 4 1994 1 4 2 11248 ## 5 1994 1 5 3 11053 ## 6 1994 1 6 4 11406  The columns for year and births seem straightforward and ready to use. The columns for month and day of the week could be improved if we changed them to text (i.e. January instead of 1; Tuesday instead of 3). To fix this, we can convert these columns to categorical variables, or factors in R. We can also specify that these categories (or factors) are ordered, meaning that Feburary comes after January, etc. Without ordering, R will plot them alphabetically, which isn’t very helpful.\nWe’ll make a new dataset named births that’s based on the combined births data, but with some new columns added:\n# The c() function lets us make a list of values month_names \u0026lt;- c(\u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;October\u0026#34;, \u0026#34;November\u0026#34;, \u0026#34;December\u0026#34;) day_names \u0026lt;- c(\u0026#34;Monday\u0026#34;, \u0026#34;Tuesday\u0026#34;, \u0026#34;Wednesday\u0026#34;, \u0026#34;Thursday\u0026#34;, \u0026#34;Friday\u0026#34;, \u0026#34;Saturday\u0026#34;, \u0026#34;Sunday\u0026#34;) births \u0026lt;- births_combined %\u0026gt;% # Make month an ordered factor, using the month_name list as labels mutate(month = factor(month, labels = month_names, ordered = TRUE)) %\u0026gt;% mutate(day_of_week = factor(day_of_week, labels = day_names, ordered = TRUE), date_of_month_categorical = factor(date_of_month)) %\u0026gt;% # Add a column indicating if the day is on a weekend mutate(weekend = ifelse(day_of_week %in% c(\u0026#34;Saturday\u0026#34;, \u0026#34;Sunday\u0026#34;), TRUE, FALSE)) head(births)  ## # A tibble: 6 x 7 ## year month date_of_month day_of_week births date_of_month_categori… weekend ## \u0026lt;dbl\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;ord\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;lgl\u0026gt; ## 1 1994 January 1 Saturday 8096 1 TRUE ## 2 1994 January 2 Sunday 7772 2 TRUE ## 3 1994 January 3 Monday 10142 3 FALSE ## 4 1994 January 4 Tuesday 11248 4 FALSE ## 5 1994 January 5 Wednesday 11053 5 FALSE ## 6 1994 January 6 Thursday 11406 6 FALSE  If you look at the data now, you can see the columns are changed and have different types. year and date_of_month are still numbers, but month, and day_of_week are ordered factors (ord) and date_of_month_categorical is a regular factor (fct). Technically it’s also ordered, but because it’s already alphabetical (i.e. 2 naturally comes after 1), we don’t need to force it to be in the right order.\nOur births data is now clean and ready to go!\nBar plot First we can look at a bar chart showing the total number of births each day. We need to make a smaller summarized dataset and then we’ll plot it:\ntotal_births_weekday \u0026lt;- births %\u0026gt;% group_by(day_of_week) %\u0026gt;% summarize(total = sum(births)) ggplot(data = total_births_weekday, mapping = aes(x = day_of_week, y = total, fill = day_of_week)) + geom_col() + # Turn off the fill legend because it\u0026#39;s redundant guides(fill = \u0026#34;none\u0026#34;)  If we fill by day of the week, we get 7 different colors, which is fine (I guess), but doesn’t really help tell a story. The main story here is that there are far fewer births during weekends. If we create a new column that flags if a row is Saturday or Sunday, we can fill by that column instead:\ntotal_births_weekday \u0026lt;- births %\u0026gt;% …","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"6f53462a8592f62079eae96e15826cef","permalink":"aem2850.toddgerarden.com/example/04-example/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/04-example/","section":"example","summary":"For this example, we’re going to use real world data to demonstrate some different ways to visualize amounts and proportions. We’ll use data from the CDC and the Social Security Administration about the number of daily births in the United States from 1994–2014.","tags":null,"title":"Amounts and proportions","type":"docs"},{"authors":null,"categories":null,"content":"Basic process for working with RStudio For this example, I’m going to create a new RStudio project, download some data, put the data in the project, and make a graph of it using R Markdown. You’ll follow this same process any time you start a new project or exercise.\nTo follow along, download this CSV file here (you may need to right click on it and select “Save As…\u0026#34;):\n  gapminder.csv  Here’s a video walkthrough of how to get started:\n  ","date":1623024e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623024e3,"objectID":"cf16b14ebe5afc7096236ebafb2e6426","permalink":"aem2850.toddgerarden.com/example/01-example/","publishdate":"2021-06-07T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/01-example/","section":"example","summary":"Basic process for working with RStudio For this example, I’m going to create a new RStudio project, download some data, put the data in the project, and make a graph of it using R Markdown.","tags":null,"title":"Introduction to R and the tidyverse","type":"docs"},{"authors":null,"categories":null,"content":"For this example, I’m going to critique and improve this random flyer I found posted in the BYU library in September 2018:\nIt’s not the best designed poster, but it’s incredibly typical of what you see in the real world. By applying the principles of CRAP, we can improve the poster significantly.\nIf you download and unzip this file, you can follow along too (but you don’t have to—you can just sit back and enjoy the ride).\n  02-example.zip  Critique   Redesign in Canva   Redesign in Illustrator   Final versions ","date":1623024e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623024e3,"objectID":"f8bbc05c75c3ee5e0fdfe484a8034c6c","permalink":"aem2850.toddgerarden.com/example/02-example/","publishdate":"2021-06-07T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/example/02-example/","section":"example","summary":"For this example, I’m going to critique and improve this random flyer I found posted in the BYU library in September 2018:\nIt’s not the best designed poster, but it’s incredibly typical of what you see in the real world.","tags":null,"title":"Graphic design","type":"docs"},{"authors":null,"categories":null,"content":"Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc. (see the full list of output types here)\nBasic Markdown formatting     Type… …or… …to get    Some text in a paragraph.\nMore text in the next paragraph. Always use empty lines between paragraphs.  Some text in a paragraph.\nMore text in the next paragraph. Always use empty lines between paragraphs.\n  *Italic* _Italic_ Italic  **Bold** __Bold__ Bold  # Heading 1  Heading 1   ## Heading 2  Heading 2   ### Heading 3  Heading 3   (Go up to heading level 6 with ######)    [Link text](http://www.example.com)  Link text  ![Image caption](/path/to/image.png)    `Inline code` with backticks  Inline code with backticks  \u0026gt; Blockquote   Blockquote\n  - Things in - an unordered - list * Things in * an unordered * list  Things in an unordered list   1. Things in 2. an ordered 3. list 1) Things in 2) an ordered 3) list Things in an ordered list   Horizontal line —\nHorizontal line ***\nHorizontal line\n    Math Markdown uses LaTeX to create fancy mathematical equations. There are like a billion little options and features available for math equations—you can find helpful examples of the the most common basic commands here.\nYou can use math in two different ways: inline or in a display block. To use math inline, wrap it in single dollar signs, like \\$y = mx + b\\$:\n    Type… …to get    Based on the DAG, the regression model for estimating the effect of education on wages is $\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon$, or $\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon$. Based on the DAG, the regression model for estimating the effect of education on wages is \\(\\hat{y} = \\beta_0 + \\beta_1 x_1 + \\epsilon\\), or \\(\\text{Wages} = \\beta_0 + \\beta_1 \\text{Education} + \\epsilon\\).    To put an equation on its own line in a display block, wrap it in double dollar signs, like this:\nType…\nThe quadratic equation was an important part of high school math: $$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ But now we just use computers to solve for $x$.  …to get…\n The quadratic equation was an important part of high school math:\n$$ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\nBut now we just use computers to solve for \\(x\\).\n  Because dollar signs are used to indicate math equations, you can’t just use dollar signs like normal if you’re writing about actual dollars. For instance, if you write This book costs \\$5.75 and this other costs \\$40, Markdown will treat everything that comes between the dollar signs as math, like so: “This book costs $5.75 and this other costs $40”.\nTo get around that, put a backslash (\\) in front of the dollar signs, so that This book costs \\\\\\$5.75 and this other costs \\\\\\$40 becomes “This book costs $5.75 and this other costs $40”.\nTables There are 4 different ways to hand-create tables in Markdown—I say “hand-create” because it’s normally way easier to use R to generate these things with packages like pander (use pandoc.table()) or knitr (use kable()). The two most common are simple tables and pipe tables. You should look at the full documentation here.\nFor simple tables, type…\nRight Left Center Default ------- ------ ---------- ------- 12 12 12 12 123 123 123 123 1 1 1 1 Table: Caption goes here  …to get…\nRight Left Center Default\n  12 12 12 12 123 123 123 123 1 1 1 1  Table: Caption goes here\nFor pipe tables, type…\n| Right | Left | Default | Center | |------:|:-----|---------|:------:| | 12 | 12 | 12 | 12 | | 123 | 123 | 123 | 123 | | 1 | 1 | 1 | 1 | Table: Caption goes here  …to get…\n   Right Left Default Center     12 12 12 12   123 123 123 123   1 1 1 1    Table: Caption goes here\nFootnotes There are two different ways to add footnotes (see here for complete documentation): regular and inline.\nRegular notes need (1) an identifier and (2) the actual note. The identifier can be whatever you want. Some people like to use numbers like [^1], but if you ever rearrange paragraphs or add notes before #1, the numbering will be wrong (in your Markdown file, not in the output; everything will be correct in the output). Because of that, I prefer to use some sort of text label:\nType…\nHere is a footnote reference[^1] and here is another [^note-on-dags]. [^1]: This is a note. [^note-on-dags]: DAGs are neat. And here\u0026#39;s more of the document.  …to get…\n Here is a footnote reference1 and here is another.2\nAnd here’s more of the document.\n This is a note.↩︎\n DAGs are neat.↩︎\n     You can also use inline footnotes with ^[Text of the note goes here], which are often easier because you don’t need to worry about identifiers:\nType…\nCausal inference is neat.^[But it can be hard too!]  …to get…\n Causal inference is neat.1\n But it can be hard too!↩︎\n    Front matter You can include a special section at the top of a Markdown document that contains metadata (or data about your document) like the title, date, …","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578873600,"objectID":"50f208c66dd6a2ac7e263653db4153ee","permalink":"aem2850.toddgerarden.com/resource/markdown/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"aem2850.toddgerarden.com/resource/markdown/","section":"resource","summary":"Markdown is a special kind of markup language that lets you format text with simple syntax. You can then use a converter program like pandoc to convert Markdown into whatever format you want: HTML, PDF, Word, PowerPoint, etc.","tags":null,"title":"Using Markdown","type":"docs"}]